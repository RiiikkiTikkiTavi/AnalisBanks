@using System.Xml.Linq
@using System.Data
@using System.Text
	



@page "/example"
@rendermode InteractiveServer
@inherits ExampleModel

@inject CreditOrgInfoClient CreditService


<h3>Данные о кредитной организации</h3>




<InputNumber @bind-Value="regnum" />
<InputDate @bind-Value="onDate" />

<label>
<InputCheckbox @bind-Value="showNulls" />  Показывать пустые значения
</label>


<Button @onclick="LoadData">Имя банка</Button>
<Button @onclick="LoadData2">Загрузить</Button>

<p>@bankName</p>

@if (isLoading)
{
	<p>Загрузка данных...</p>
}
else if (ds == null || ds.Tables.Count == 0)
{
	<p>Нет данных</p>
}
else
{
	@foreach (DataTable table in ds.Tables)
	{
		{
			<h4>@table.TableName</h4>
			<table class="table">
				<thead>
					<tr>
						@foreach (DataColumn column in table.Columns)
						{
							<th>@column.ColumnName</th>
						}
					</tr>
				</thead>
				<tbody>
					@foreach (DataRow row in ds.Tables[0].Rows.Cast<DataRow>()
									.Where(row => showNulls|| !ContainsNull(row))) // Фильтрация строк с null
					{
						<tr>
							@foreach (var item in row.ItemArray)
							{
								<td>@(item ?? "NULL")</td> <!-- Отображаем null как "NULL"
								<td>@item</td> -->
							}
						</tr>
					}
				</tbody>
			</table>
		}
	}

	
}



@code {

	// можно добавить фильтрацию-поиск по колонкам
	// https://blazor.syncfusion.com/documentation/datagrid/filtering

	private int regnum = 1000;
	private string bankName;
	//private DateTime onDate = DateTime.Today;
	private DateTime onDate = new DateTime(2025, 1, 1); // год - месяц - день;
	DataSet ds;
	private bool isLoading = false;
	private bool showNulls = false;



	private async Task LoadData()
	{

		bankName = await CreditService.GetBankNameByRegnum(regnum);
		Console.WriteLine($"Name: {bankName}");

	}
	private async Task LoadData2()
	{

		isLoading = true; // Показываем "Загрузка данных..."
		StateHasChanged(); // Принудительно обновляем UI

		ds = await CreditService.GetData123(regnum, onDate);

		isLoading = false; // Данные загружены, скрываем "Загрузка данных..."
		StateHasChanged(); // Обновляем UI снова


		// Вывод таблиц в консоль
		/*
		foreach (DataTable table in ds.Tables)
			{
			Console.WriteLine($"Таблица: {table.TableName}");

			// Вывод заголовков колонок
			Console.WriteLine(string.Join(" | ", table.Columns.Cast<DataColumn>().Select(col => col.ColumnName))); // заголовки
			Console.WriteLine(new string('-', 50)); // разделитель
			foreach (DataRow row in table.Rows)
			{
				Console.WriteLine(string.Join(" | ", row.ItemArray)); // строки
			}

			Console.WriteLine(new string('=', 50)); // Разделитель между таблицами
		}
		*/


	}

	// проверить содержит ли строка null-значения
	private bool ContainsNull(DataRow row)
	{
		return row.ItemArray.Any(item => item == DBNull.Value || item == null);
	}
}


<!--
	

<div>
	<input type="number" @bind-value="@Input" @bind-value:event="oninput" placeholder="Введите число" />
	<button @onclick="@(() => SetInput(Input))">Ввод</button>
</div>
<div>
	<button @onclick="@(() => SetOperation("+"))">+</button>
	<button @onclick="@(() => SetOperation("-"))">-</button>
	<button @onclick="@(() => SetOperation("*"))">*</button>
	<button @onclick="@(() => SetOperation("/"))">/</button>
	<button @onclick="@(() => SetOperation("100%"))">100%</button>

</div>
<div>
	<input type="text" value="@Display" readonly />
</div>

<div>
	<button @onclick="Clear">C</button>
    <button @onclick="Calculate">=</button>
</div>
<div>
	<input type="text" value="@Input" readonly />
</div>
-->



