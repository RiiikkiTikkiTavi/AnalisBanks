@* @page "/formsTemplate" *@

@using BlazorApp1.Models
@using System.Data
@inject NavigationManager NavigationManager



@rendermode InteractiveServer

<!--<h3>Шаблоны форм</h3> -->

<select class="form-select w-50 mb-3" @bind="SelectedForm">
	@foreach (int form in FormNumber)
	{
		<option value="@form">Форма @form</option>
	}
</select>

@if (nors == null && t101 == null)
{
}
else
{
	// вывод данных форм
	@if (SelectedForm == 123 || SelectedForm == 135) {
		@if (nors != null){
			<table class="table table-hover">
			<thead>
				<tr>
					<th>Код</th>
					<th>Описание</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in nors)
				{
					<tr class="@(item.IdTnor == selectedItemIdNor ? "table-select" : "")"
							@onclick="@(() => SelectItem(item.IdTnor))">
						<td>@item.Code</td>
						<td>@item.Name</td>
					</tr>
				}
			</tbody>
		</table>
	}
	}
	@if (SelectedForm == 101){
	@if(t101!=null){
		<table class="table table-hover w-25 text-center">
			<thead>
				<tr>
					<th>Глава плана счетов</th>
					<th>БС</th>
					<th>Признак счета</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in t101)
				{
					<tr class="@(item.IdT101 == selectedItemId101 ? "table-select" : "")" 
							@onclick="@(() => selectedItemId101 = item.IdT101)">
						<td>@item.Plan</td>
						<td>@item.Name</td>
						<td>@(item.AP == "1" ? "А" : item.AP == "2" ? "П" : "")</td>
					</tr>
				}
			</tbody>
		</table>
	}
	}

}

<style>
	.table-hover tbody tr:hover {
		background-color: cadetblue; /* Цвет фона при наведении */
	}

	.table-select {
		transform: scale(0.98);
		/* background-color: dodgerblue !important; /* Зеленый для выбранной строки */
		color: darkslategrey;
		font-weight: 700;
	}

</style>


@code {

	[Inject] private IDbContextFactory<BanksContext> DbFactory { get; set; }
	[Parameter] public EventCallback<int> OnItemSelected { get; set; }
	[Parameter] public EventCallback OnClose { get; set; }

	private int selectedForm = 123; // ID формы по умолчанию
	private List<int> formNumber = new() { 123, 135, 101 }; // Пример списка форм

	private int? selectedItemIdNor;
	private int? selectedItemId101;

	public int SelectedForm
	{
		get => selectedForm;
		set
		{
			//if (selectedForm != value)
			//{
				selectedForm = value;
				_ = LoadMethods(); // Асинхронный вызов без ожидания
			//}
		}
	}

	public List<int> FormNumber { get => formNumber; set => formNumber = value; }

	//private CreditOrgInfoClient _creditService;

	//[Inject]
	//public CreditOrgInfoClient CreditService { get => _creditService; set => _creditService = value; }

	private List<TemplatesNor> nors; // шаблон нормативов 123/135
	private List<Templates101> t101; // шаблон нормативов 101

	// загрузка шаблонов форм
	private async Task LoadMethods()
	{
		await using var db = DbFactory.CreateDbContext();
		StateHasChanged(); // Принудительно обновляем UI
		switch (SelectedForm)
		{
			case 123:
				nors = await db.TemplatesNors.Where(n => n.Form == "123").ToListAsync();
				Console.WriteLine("form 123");
				break;
			case 135:
				nors = await db.TemplatesNors.Where(n => n.Form == "135").OrderBy(n => n.Code).ToListAsync();
				Console.WriteLine("form 135");
				break;
			case 101:
				t101 = await db.Templates101s.OrderBy(n => n.Plan).ThenBy(n => n.Name).ToListAsync();
				Console.WriteLine("form 101");
				break;
		}
		StateHasChanged(); // Обновляем UI снова
	}


	protected override async Task OnInitializedAsync()
	{
		// Загружаем данные из базы данных
		await LoadMethods();
	}


	private async Task SelectItem(int id)
	{
		selectedItemIdNor = id;
		await OnItemSelected.InvokeAsync(id);
	}

	private async Task Close()
	{
		await OnClose.InvokeAsync();
	}
	/*
	private void OnRowClick(int id)
	{
		selectedItemIdNor = id;
	}*/

	/*private void SelectItem(int item)
	{
		selectedItemId = item; // Устанавливаем id выбранной методики
		Console.WriteLine($"Selected item {selectedItemId}");
	}
	*/











	// заполнение шаблона 101 формы
	/*
	public async void LoadDataNor()
		{
		DataSet dataSet;
		DateTime onDate = new DateTime(2025, 1, 1); // год - месяц - день;
		dataSet = await CreditService.GetData101(1000, onDate);


		if (dataSet == null || dataSet.Tables.Count == 0)
			{
			return;
		}
		DataTable table = dataSet.Tables[0];


		foreach (DataRow row in table.Rows)
			{
			var t101 = new Templates101();
			t101.Plan = Convert.ToChar(row["pln"]);
			t101.AP = row["ap"].ToString();
			t101.Name = row["numsc"].ToString();
			db.Templates101s.Add(t101);
			db.SaveChanges();
	};
	}
	*/

	// заполнение шаблона 135 формы
	/*
	public async void LoadDataNor()
		{
		DataSet dataSet;
		DateTime onDate = new DateTime(2025, 1, 1); // год - месяц - день;
		dataSet = await CreditService.GetData135(1000, onDate);


		if (dataSet == null || dataSet.Tables.Count == 0)
			{
			return;
		}
		DataTable table = dataSet.Tables[0];


		foreach (DataRow row in table.Rows)
			{
			var nors = new TemplatesNor();
			nors.Form = "135";
			nors.Code = row["C3"].ToString();
			db.TemplatesNors.Add(nors);
			db.SaveChanges();
	};
	}
	*/

	// заполнение шаблона 123 формы
	/*
	public async void LoadDataNor()
		{
		DataSet dataSet;
		DateTime onDate = new DateTime(2025, 1, 1); // год - месяц - день;
		dataSet = await CreditService.GetData123(1000, onDate);


		if (dataSet == null || dataSet.Tables.Count == 0)
			{
			return; // или log, throw, что угодно
		}
		DataTable table = dataSet.Tables[0];


		foreach (DataRow row in table.Rows)
			{
			var nors = new TemplatesNor();
			nors.Form = "123";
			nors.Code = row["Code"].ToString();
			nors.Name = row["Name"].ToString();
			db.TemplatesNors.Add(nors);
			db.SaveChanges();
	};
	}
		*/




}
