@page "/calculate"
@using BlazorApp1.Models
@using BlazorBootstrap
@using System.Text.RegularExpressions
@using System.Globalization
@using Blazorise.Charts

@rendermode InteractiveServer

@inject IJSRuntime JS
@inject ExcelService ExcelService

<h3>Расчет методик</h3>

<div class="d-flex align-items-start gap-3 flex-wrap">
	<select @bind="SelectedMethod" class="form-select w-25">
		<option disabled value="0">Выберите методику</option>
		@foreach (var meth in methods)
		{
			<option value="@meth.IdMethods">@meth.Name</option>
		}
	</select>


	<InputNumber @bind-Value="Regnum" class="form-control w-auto" />
	<InputDate @bind-Value="OnDate" class="form-control w-auto" />


	<button class="btn btn-primary" @onclick="Calcs">Рассчитать</button>
	<button class="btn btn-secondary" @onclick="DownloadExcel">Скачать Excel</button>

</div>

@if (args != null && args.Any())
{
	<table class="table">
		<thead>
			<tr>
				<th>Показатель</th>
				<th>Формула</th>
				<th>Текущее значение</th>
				<th>Прошлое значение</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var a in args)
			{
				<tr>
					<td>@a.Name</td>
					<td>@a.Expression</td>
					<td>
						@(results.TryGetValue(a.IdArg, out var val)
										? (val.result1?.ToString("0.##") ?? "—")
										: "—")
					</td>
					<td>
						@(results.TryGetValue(a.IdArg, out var val1)
										? (val1.result2?.ToString("0.##") ?? "—")
										: "—")
					</td>
				</tr>
			}
		</tbody>
	</table>
	
}
@if (showChart)
{
	<Blazorise.Charts.BarChart TItem="double" @ref="barChart" />
}


<!--else
{
	<div class="text-muted mt-3">Нет показателей для выбранной методики.</div>
	не работает
}-->


<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1100;">
	<div class="toast show" role="alert" aria-live="assertive" aria-atomic="true"
		 style="min-width: 250px;" hidden="@(!ShowToast)">
		<div class="toast-header">
			<strong class="me-auto">Ошибка</strong>
			<button type="button" class="btn-close" @onclick="() => ShowToast = false"></button>
		</div>
		<div class="toast-body">
			@ToastMessage
		</div>
	</div>
</div>




@code {
	// внедрение фабрики для создания экземпляров BanksContext.
	[Inject] private IDbContextFactory<BanksContext> dbFactory { get; set; }
	private int regnum = 1000;
	//private DateTime onDate = DateTime.Today;
	private DateTime onDate = new DateTime(2025, 1, 1); // год - месяц - день;
	private CreditOrgInfoClient _creditService;
	[Inject]
	public CreditOrgInfoClient CreditService { get => _creditService; set => _creditService = value; }


	private int selectedMethod = 0; // ID метода по умолчанию
	private int SelectedMethod
	{
		get => selectedMethod;
		set
		{
			if (selectedMethod != value)
			{
				selectedMethod = value;
				_ = LoadArguments(value);
			}
		}
	}

	private List<Method> methods = new(); // Список методик
	private List<Argument> args;
	private Dictionary<int, (decimal? result1, decimal? result2)> results = new();
	private Argument Arg { get; set; } = new();

	private MethodsResult Result { get; set; } = new();

	public int Regnum { get => regnum; set => regnum = value; }
	public DateTime OnDate { get => onDate; set => onDate = value; }

	private bool ShowToast { get; set; } = false;
	private string ToastMessage { get; set; } = string.Empty;

	private BarChart<double> barChart;
	private bool showChart = false;


	private async Task LoadMethods()
	{
		await using var db = dbFactory.CreateDbContext();
		methods = await db.Methods.ToListAsync();
	}

	protected override async Task OnInitializedAsync()
	{
		// Загружаем данные из базы данных
		await LoadMethods();
	}

	private async Task LoadArguments(int idMeth)
	{
		await using var db = dbFactory.CreateDbContext();
		args = await db.Arguments.Where(a => a.IdMethods == idMeth).ToListAsync();
		Console.WriteLine($"Args");
		Console.WriteLine(string.Join(Environment.NewLine, args.Select(arg => $"Name: {arg.Name}, Id: {arg.IdArg}")));
		Console.WriteLine($"Method {idMeth}");
		StateHasChanged();
	}
	private async Task OnMethodChanged(ChangeEventArgs e)
	{
		Console.WriteLine("selectedMethod" + selectedMethod);
		await LoadArguments(selectedMethod);

		StateHasChanged();

	}



	private Modal modal = default!;
	private Modal tempModal = default!;

	private decimal result = 0;

	// преобразование формулы в постфиксный вид
	private static List<string> ToPostfix(string expression)
	{
		var output = new List<string>();
		var operators = new Stack<char>();

		// Приоритет операторов
		var precedence = new Dictionary<char, int>
	{
		{ '+', 1 }, { '-', 1 },
		{ '*', 2 }, { '/', 2 }, { '%', 2 },
		{ '^', 3 }
	};

		int i = 0;
		while (i < expression.Length)
		{
			char symb = expression[i];

			// Пропускаем пробелы
			if (char.IsWhiteSpace(symb))
			{
				i++;
				continue;
			}

			// Обработка числа (включая отрицательные)
			// проверка выражения
			// если цифры, точка или знак минуса, добавляем
			if (char.IsDigit(symb) || symb == '.' ||
				(symb == '-' && (i == 0 || expression[i - 1] == '(' || "+-*/%^".Contains(expression[i - 1]))))
			{
				// Начинаем собирать число
				string number = symb.ToString();
				i++;

				// Продолжаем пока цифры или точка
				while (i < expression.Length && (char.IsDigit(expression[i]) || expression[i] == '.'))
				{
					number += expression[i];
					i++;
				}

				output.Add(number);
				continue;
			}

			// Открывающая скобка
			if (symb == '(')
			{
				operators.Push(symb);
			}
			// Закрывающая скобка
			else if (symb == ')')
			{
				while (operators.Count > 0 && operators.Peek() != '(')
					output.Add(operators.Pop().ToString()); //выгрузить все операторы до ближайшей открывающей скобки
				if (operators.Count > 0 && operators.Peek() == '(')
					operators.Pop(); // удалить '('
			}
			// Оператор
			else if (precedence.ContainsKey(symb))
			{
				while (operators.Count > 0 &&
								operators.Peek() != '(' &&
								precedence[operators.Peek()] >= precedence[symb]) // приоритет оператора в стеке выше или равен приоритету текущего оператора
				{
					output.Add(operators.Pop().ToString());  // добавляем в выражение
				}
				operators.Push(symb); // добавляем текущий оператор в стек
			}

			i++;
		}

		// Добавляем оставшиеся операторы
		while (operators.Count > 0)
		{
			output.Add(operators.Pop().ToString());
		}
		return output;

	}

	// расчет формулы
	private static decimal EvaluatePostfix(List<string> express)
	{
		var stack = new Stack<decimal>();

		foreach (var exp in express)
		{
			if (decimal.TryParse(exp, NumberStyles.Any, CultureInfo.InvariantCulture, out var number))
			{
				stack.Push(number);
			}
			else
			{
				var b = stack.Pop();
				var a = stack.Pop();

				decimal result = exp switch
				{
					"+" => a + b,
					"-" => a - b,
					"*" => a * b,
					"/" => b != 0 ? a / b : throw new DivideByZeroException(),
					"%" => a * b / 100,
					"^" => (decimal)Math.Pow((double)a, (double)b),
					_ => throw new InvalidOperationException($"Неизвестный оператор: {exp}")
				};

				stack.Push(result);
			}
		}

		return stack.Pop();
	}

	// вычисление показателей
	private async void Calcs()
	{
		if (!ValidateInputs()) return;

		var previousMonth = OnDate.AddMonths(-1);

		Console.WriteLine($"date {previousMonth}");
		await using var db = dbFactory.CreateDbContext();

		foreach (var arg in args)
		{
			// проверить существуют ли данные расчета

			Console.WriteLine("arg " + arg.ShortName);
			string? expression = arg.Expression;
			string? consist = arg.Consist;
			Console.WriteLine("exp " + expression + " con " + consist);

			if (string.IsNullOrWhiteSpace(expression) || string.IsNullOrWhiteSpace(consist))
				continue;

			// Разбиваем на строки и сохраняем с префиксами
			var rawIds = consist.Split(',', StringSplitOptions.RemoveEmptyEntries)
					.Select(s => s.Trim())
					.ToList();

			Console.WriteLine("rawIds ");
			Console.WriteLine(string.Join(Environment.NewLine, rawIds));

			// Разбиваем по типу источника
			var (aIds, nIds) = SplitIdsByPrefix(rawIds);

			// Ищем параметры в выражении
			var paramMatches = Regex.Matches(expression, @"\{(?:([АН]))?(\d+(?:\.\d+)*)([ПА]?)\}")
			.Cast<Match>()
			.Select(m => m.Value)
			.Distinct()
			.ToList();

			Console.WriteLine("paramMatches");
			Console.WriteLine(string.Join(Environment.NewLine, paramMatches));

			if (paramMatches.Count != rawIds.Count)
			{
				Console.WriteLine($"Incorrect amount: {arg.Name}");
				continue;
			}

			// Строим отображение параметра на ID с учетом позиции
			Dictionary<string, (char Prefix, int Id)> paramToIdMap = new();
			for (int i = 0; i < paramMatches.Count; i++)
			{
				string rawId = rawIds[i];
				char prefix = rawId[0]; // 'А' или 'Н'
				int id = int.Parse(rawId[1..]);
				paramToIdMap[paramMatches[i]] = (prefix, id);
			}

			decimal? result1 = await GetResult(expression, paramToIdMap, arg.IdArg, Regnum, OnDate, aIds, nIds);
			decimal? result2 = await GetResult(expression, paramToIdMap, arg.IdArg, Regnum, previousMonth, aIds, nIds);

			results[arg.IdArg] = (result1, result2);
			showChart = true;
			StateHasChanged();
			await DrawChartAsync();
		}
	}

	// разделить параметры по типу источника
	private (List<int> aIds, List<int> nIds) SplitIdsByPrefix(List<string> rawIds)
	{
		var aIds = rawIds.Where(s => s.StartsWith("А", StringComparison.OrdinalIgnoreCase))
							.Select(s => int.Parse(s[1..]))
							.ToList();

		var nIds = rawIds.Where(s => s.StartsWith("Н", StringComparison.OrdinalIgnoreCase))
							.Select(s => int.Parse(s[1..]))
							.ToList();

		return (aIds, nIds);
	}

	// подстановка значений в формулу
	private string SubstituteParameters(
	string expression,
	Dictionary<string, (char Prefix, int Id)> paramToIdMap,
	Dictionary<int, decimal?> data101,
	Dictionary<int, decimal?> dataNor)
	{
		return Regex.Replace(expression, @"\{(?:([АН]))?(\d+(?:\.\d+)*)([ПА]?)\}", match =>
		{
			string param = match.Value;

			if (paramToIdMap.TryGetValue(param, out var info))
			{
				decimal val = 0;

				if (info.Prefix == 'А')
					val = data101.TryGetValue(info.Id, out var v1) ? v1 ?? 0 : 0;
				else if (info.Prefix == 'Н')
					val = dataNor.TryGetValue(info.Id, out var v2) ? v2 ?? 0 : 0;

				return val.ToString("G", CultureInfo.InvariantCulture);
			}
			return "0";
		});
	}


	// загрузка значений из 101 формы с проверкой наличия данных в таблице
	private async Task<Dictionary<int, decimal?>> Data101Loaded(
	int regnum,
	DateTime dt,
	int idInfo,
	List<int> aIds)
	{
		await using var db = dbFactory.CreateDbContext();

		// Проверяем, что для каждого IdT101 из aIds есть запись в таблице с нужным idInfo
		bool hasData = await db.Data101s
	.AnyAsync(d => d.IdInfo == idInfo);

		if (!hasData)
		{
			await CreditService.LoadData101(regnum, dt);
		}

		// Загружаем и возвращаем данные
		return await db.Data101s
			.Where(d => aIds.Contains(d.IdT101 ?? -1) && d.IdInfo == idInfo)
			.GroupBy(d => d.IdT101 ?? -1)
			.Select(g => new { Id = g.Key, Val = g.FirstOrDefault().Vint })
			.ToDictionaryAsync(x => x.Id, x => x.Val);
	}


	// загрузка значений из нормативов формы с проверкой наличия данных в таблице
	private async Task<Dictionary<int, decimal?>> DataNorLoaded(
		int regnum,
		DateTime dt,
		int idInfo,
		List<int> nIds)
	{
		await using var db = dbFactory.CreateDbContext();

		// Проверяем, что для каждого IdTnor из nIds есть запись в базе с нужным idInfo
		bool hasData = await db.DataNors
	.AnyAsync(d => d.IdInfo == idInfo);

		if (!hasData)
		{
			await CreditService.LoadData135(regnum, dt);
			await CreditService.LoadData123(regnum, dt);
		}

		// Загружаем и возвращаем данные с группировкой по ключу, чтобы избежать дубликатов
		return await db.DataNors
			.Where(d => nIds.Contains(d.IdTnor ?? -1) && d.IdInfo == idInfo)
			.GroupBy(d => d.IdTnor ?? -1)
			.Select(g => new { Id = g.Key, Val = g.FirstOrDefault().Val })
			.ToDictionaryAsync(x => x.Id, x => x.Val);
	}


	private async Task<decimal?> GetResult(
	string expression,
	Dictionary<string, (char Prefix, int Id)> paramToIdMap,
	int argId,
	int regnum,
	DateTime calcDate,
	List<int> aIds,
	List<int> nIds)
	{
		await using var db = dbFactory.CreateDbContext();

		var info = await CreditService.CreateLoadInfo(Regnum, calcDate);

		// Загружаем данные из источников
		var data101 = await Data101Loaded(regnum, calcDate, info, aIds);
		var dataNor = await DataNorLoaded(regnum, calcDate, info, nIds);

		// Подстановка значений в выражение
		var parsedExpression = SubstituteParameters(expression, paramToIdMap, data101, dataNor);

		try
		{
			var readyExpr = ToPostfix(parsedExpression);
			var result = Math.Round(EvaluatePostfix(readyExpr), 2);

			var existing = await db.MethodsResults
				.FirstOrDefaultAsync(r => r.IdArg == argId && r.IdInfo == info);

			if (existing != null)
			{
				existing.Val = result;
			}
			else
			{
				db.MethodsResults.Add(new MethodsResult
					{
						IdInfo = info,
						IdArg = argId,
						Val = result
					});
			}

			await db.SaveChangesAsync();
			Console.WriteLine($"Itog ' = {result}");
			StateHasChanged();

			return result;
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error '{expression}': {ex.Message}");
			return null;
		}
	}


	// формирование excel файла
	private async Task DownloadExcel()
	{
		if (!ValidateInputs()) return;
		var dateOnly = DateOnly.FromDateTime(OnDate);
		var bytes = await ExcelService.GenerateExcelAsync(dateOnly, Regnum, SelectedMethod);
		var base64 = Convert.ToBase64String(bytes);

		await JS.InvokeVoidAsync("downloadFileFromBytes", "report.xlsx", base64);
	}

	private bool ValidateInputs()
	{
		if (SelectedMethod == 0)
		{
			ToastMessage = "Выберите методику.";
			ShowToast = true;
			return false;
		}
		if (Regnum == 0)
		{
			ToastMessage = "Введите РегНомер.";
			ShowToast = true;
			return false;
		}
		if (OnDate == default)
		{
			ToastMessage = "Выберите дату.";
			ShowToast = true;
			return false;
		}

		return true;
	}

	
	private async Task DrawChartAsync()
	{
		if (barChart is null)
        return;

		var labels = args.Select(a => a.Name).ToList();

		var currentValues = args.Select(a =>
			results.TryGetValue(a.IdArg, out var val)
				? (double)(val.result1 ?? 0m)
				: 0.0).ToList();

		var previousValues = args.Select(a =>
			results.TryGetValue(a.IdArg, out var val)
				? (double)(val.result2 ?? 0m)
				: 0.0).ToList();

		var datasetCurrent = new BarChartDataset<double>
			{
				Label = "Текущий период",
				Data = currentValues,
				BackgroundColor = "rgba(54, 162, 235, 0.2)",
				BorderColor = "rgba(54, 162, 235, 1)",
				BorderWidth = 1
			};

		var datasetPrevious = new BarChartDataset<double>
			{
				Label = "Прошлый период",
				Data = previousValues,
				BackgroundColor = "rgba(255, 206, 86, 0.2)",
				BorderColor = "rgba(255, 206, 86, 1)",
				BorderWidth = 1
			};

		await barChart.Clear();
		await barChart.AddLabelsDatasetsAndUpdate(labels, datasetCurrent, datasetPrevious);
	}

	private async Task OnShowModalClick()
	{
		await modal.ShowAsync();
	}

	private async Task OnHideModalClick()
	{
		await modal.HideAsync();
	}


	private async Task OnShowTemp()
	{
		await tempModal.ShowAsync();
	}

	private async Task OnHideTemp()
	{
		await tempModal.HideAsync();

	}


}