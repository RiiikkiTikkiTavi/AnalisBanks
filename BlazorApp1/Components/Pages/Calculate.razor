@page "/calculate"
@using BlazorApp1.Models
@using BlazorBootstrap
@using System.Text.RegularExpressions
@using System.Globalization

@rendermode InteractiveServer

<h3>Calculate</h3>

<div class="d-flex align-items-start gap-3 flex-wrap">
<select @bind="SelectedMethod" class="form-select w-25">
    <option disabled value="0">Выберите методику</option>
    @foreach (var meth in methods)
    {
        <option value="@meth.IdMethods">@meth.Name</option>
    }
</select>


    <InputNumber @bind-Value="Regnum" class="form-control w-auto" />
    <InputDate @bind-Value="OnDate" class="form-control w-auto" />


<button class="btn btn-primary" @onclick="Calcs">Рассчитать</button>
</div>

@if (args != null && args.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Показатель</th>
                <th>Краткое название</th>
                <th>Значение</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var a in args)
            {
                <tr>
                    <td>@a.Name</td>
                    <td>@a.Expression</td>
                    <td>resul</td>
                </tr>
            }
        </tbody>
    </table>
}

<!--else
{
    <div class="text-muted mt-3">Нет показателей для выбранной методики.</div>
    не работает
}-->


<!--Модальное окно выбора показателя-->
<!--В GetItemSelected пердается id и тип выбранной строки-->
<Modal @ref="tempModal" Title="Выбрать показатель" Class="modal-lg">
    <BodyTemplate>
        <FormsTemplate />
    </BodyTemplate>
    <FooterTemplate>
        <Button class="btn btn-secondary" @onclick="OnHideTemp">Закрыть</Button>
    </FooterTemplate>
</Modal>





@code {
    // внедрение фабрики для создания экземпляров BanksContext.
    [Inject] private IDbContextFactory<BanksContext> dbFactory { get; set; }
    private int regnum = 1000;
    private string bankName;
    //private DateTime onDate = DateTime.Today;
    private DateTime onDate = new DateTime(2025, 1, 1); // год - месяц - день;

    private bool isLoading = false;

    private int selectedMethod = 0; // ID формы по умолчанию


    private MethodsResult Result { get; set; } = new();

    public int Regnum { get => regnum; set => regnum = value; }
    public string BankName { get => bankName; set => bankName = value; }
    public DateTime OnDate { get => onDate; set => onDate = value; }

    private int SelectedMethod
    {
        get => selectedMethod;
        set
        {
            if (selectedMethod != value)
            {
                selectedMethod = value;
                _ = LoadArguments(value);
            }
        }
    }
    private List<Method> methods = new(); // Список методик
    private List<Argument> args;
    private Argument Arg { get; set; } = new();

    private async Task LoadMethods()
    {
        await using var db = dbFactory.CreateDbContext();
        methods = await db.Methods.ToListAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        // Загружаем данные из базы данных
        await LoadMethods();
    }

    private async Task LoadArguments(int idMeth)
    {
        await using var db = dbFactory.CreateDbContext();
        args = await db.Arguments.Where(a => a.IdMethods == idMeth).ToListAsync();
        Console.WriteLine($"Args");
        Console.WriteLine(string.Join(Environment.NewLine, args.Select(arg => $"Name: {arg.Name}, Id: {arg.IdArg}")));
        Console.WriteLine($"Method {idMeth}");
        StateHasChanged();
    }
    private async Task OnMethodChanged(ChangeEventArgs e)
    {
        Console.WriteLine("selectedMethod" + selectedMethod);
        await LoadArguments(selectedMethod);

        StateHasChanged();

    }

    private CreditOrgInfoClient _creditService;
    [Inject]
    public CreditOrgInfoClient CreditService { get => _creditService; set => _creditService = value; }

    private Modal modal = default!;
    private Modal tempModal = default!;

    private async void Calcs2()
    {
        //await using var db = dbFactory.CreateDbContext();
        // получить формулу expression показателя по id_arg
        // получить состав формулы consist, который имеет вид А950,А992,А901,
        // представить consist в виде массива
        // найти в таблице data101 по id (950,992,901 соответственно) значения vint
        // заменить параметры (значения в фигурных скобках) в формуле {303П}+{446П}-{446А}*3.4+140 на эти значение vint соответсвенно
        // распарсить формулу и рассчитать значение

        var test2 = ToPostfix(test);
        var result = EvaluatePostfix(test2);
        Console.WriteLine("result" + result);

    }

    private string test { get; set; } = string.Empty;
    private List<string> test2;
    private decimal result = 0;

    private static List<string> ToPostfix(string expression)
    {
        var output = new List<string>();
        var operators = new Stack<char>();

        // Приоритет операторов
        var precedence = new Dictionary<char, int>
    {
        { '+', 1 }, { '-', 1 },
        { '*', 2 }, { '/', 2 }, { '%', 2 },
        { '^', 3 }
    };

        int i = 0;
        while (i < expression.Length)
        {
            char symb = expression[i];

            // Пропускаем пробелы
            if (char.IsWhiteSpace(symb))
            {
                i++;
                continue;
            }

            // Обработка числа (включая отрицательные)
            // проверка выражения
            // если цифры, точка или знак минуса, добавляем
            if (char.IsDigit(symb) || symb == '.' ||
                (symb == '-' && (i == 0 || expression[i - 1] == '(' || "+-*/%^".Contains(expression[i - 1]))))
            {
                // Начинаем собирать число
                string number = symb.ToString();
                i++;

                // Продолжаем пока цифры или точка
                while (i < expression.Length && (char.IsDigit(expression[i]) || expression[i] == '.'))
                {
                    number += expression[i];
                    i++;
                }

                output.Add(number);
                continue;
            }

            // Открывающая скобка
            if (symb == '(')
            {
                operators.Push(symb);
            }
            // Закрывающая скобка
            else if (symb == ')')
            {
                while (operators.Count > 0 && operators.Peek() != '(')
                    output.Add(operators.Pop().ToString()); //выгрузить все операторы до ближайшей открывающей скобки
                if (operators.Count > 0 && operators.Peek() == '(')
                    operators.Pop(); // удалить '('
            }
            // Оператор
            else if (precedence.ContainsKey(symb))
            {
                while (operators.Count > 0 &&
                       operators.Peek() != '(' &&
                       precedence[operators.Peek()] >= precedence[symb]) // приоритет оператора в стеке выше или равен приоритету текущего оператора
                {
                    output.Add(operators.Pop().ToString());  // добавляем в выражение
                }
                operators.Push(symb); // добавляем текущий оператор в стек
            }

            i++;
        }

        // Добавляем оставшиеся операторы
        while (operators.Count > 0)
        {
            output.Add(operators.Pop().ToString());
        }
        Console.WriteLine("Expr: " + string.Join(" ", output));
        return output;

    }
    private static decimal EvaluatePostfix(List<string> express)
    {
        var stack = new Stack<decimal>();

        foreach (var exp in express)
        {
            if (decimal.TryParse(exp, NumberStyles.Any, CultureInfo.InvariantCulture, out var number))
            {
                stack.Push(number);
            }
            else
            {
                var b = stack.Pop();
                var a = stack.Pop();

                decimal result = exp switch
                {
                    "+" => a + b,
                    "-" => a - b,
                    "*" => a * b,
                    "/" => b != 0 ? a / b : throw new DivideByZeroException(),
                    "%" => a * b / 100,
                    "^" => (decimal)Math.Pow((double)a, (double)b),
                    _ => throw new InvalidOperationException($"Неизвестный оператор: {exp}")
                };

                stack.Push(result);
            }
        }

        return stack.Pop();
    }



    private async void Calcs()
    {
        
        Console.WriteLine("Calcs");
        await using var db = dbFactory.CreateDbContext();
        var info = await CreditService.CreateLoadInfo(Regnum, OnDate);

        foreach (var arg in args)
        {
            
            Console.WriteLine("arg " + arg.ShortName);
            string? expression = arg.Expression;
            string? consist = arg.Consist;
            Console.WriteLine("exp " + expression + " con " + consist);

            if (string.IsNullOrWhiteSpace(expression) || string.IsNullOrWhiteSpace(consist))
                continue;

            var ids = consist
            .Split(',', StringSplitOptions.RemoveEmptyEntries)
            .Select(s => int.Parse(s[1..]))
            .ToList();

            Console.WriteLine("ids");
            Console.WriteLine(string.Join(Environment.NewLine,ids));

            // Извлекаем параметры из expression: {656П}, {992}, {901А} и т.д.
            var paramMatches = Regex.Matches(expression, @"\{(\d+)([ПА]?)\}")
                .Cast<Match>()
                .Select(m => m.Value)
                .Distinct()
                .ToList();

            Console.WriteLine("paramMatches");
            Console.WriteLine(string.Join(Environment.NewLine, paramMatches));

            if (paramMatches.Count != ids.Count)
            {
                Console.WriteLine($"Incorrect amount: {arg.Name}");
                continue;
            }

            // Строим соответствие параметр -> id
            Dictionary<string, int> paramToIdMap = new();
            for (int i = 0; i < paramMatches.Count; i++)
            {
                paramToIdMap[paramMatches[i]] = ids[i];
            }

            // Загружаем значения vint из таблицы data101
            var data = await db.Data101s
            .Where(d => ids.Contains(d.IdT101 ?? -1) && d.IdInfo == info)
            .ToDictionaryAsync(d => d.IdT101 ?? -1, d => d.Vint);

            // Подстановка значений в формулу
            var parsedExpression = Regex.Replace(expression, @"\{(\d+)([ПА]?)\}", match =>
            {
                Console.WriteLine("parsedExpression");
                var fullParam = match.Value;
                if (paramToIdMap.TryGetValue(fullParam, out int id))
                {
                    decimal val = data.TryGetValue(id, out decimal? nullableVal) ? nullableVal ?? 0 : 0;
                    return val.ToString("G", CultureInfo.InvariantCulture);
                }
                return "0";
            });

            try
            {
                var readyExpr = ToPostfix(parsedExpression);
                result = Math.Round(EvaluatePostfix(readyExpr),2);

                var resultEntity = new MethodsResult
                    {
                        IdInfo = info,
                        IdArg = arg.IdArg,
                        Val = result
                    };

                db.MethodsResults.Add(resultEntity);
                await db.SaveChangesAsync(); // Асинхронное сохранение в базу данных
                Console.WriteLine("Save argument");
              

                Console.WriteLine($"Itog '{arg.Name}' = {result}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error '{expression}': {ex.Message}");
            }
        }
    }


    
   
    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }


    private async Task OnShowTemp()
    {
        await tempModal.ShowAsync();
    }

    private async Task OnHideTemp()
    {
        await tempModal.HideAsync();
       
    }
   

}