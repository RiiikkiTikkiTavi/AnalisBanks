@page "/calculate"
@using BlazorApp1.Models
@using BlazorBootstrap

@rendermode InteractiveServer

<h3>Calculate</h3>

<div class="mb-2 d-flex flex-wrap gap-1">
    <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => Display+=" + ")">+</button>
    <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => Display+=" - ")">-</button>
    <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => Display+=" * ")">*</button>
    <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => Display+=" / ")">/</button>
    <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => Display+="100%")">100%</button>
</div>

<div class="mb-2">
    <div class="d-flex gap-1 mb-1">
        @foreach (var n in new[] { "7", "8", "9" })
        {
            <button class="btn btn-sm btn-outline-dark" style="width: 50px;" @onclick="@(() => Display += n)">@n</button>
        }
    </div>
    <div class="d-flex gap-1 mb-1">
        @foreach (var n in new[] { "4", "5", "6" })
        {
            <button class="btn btn-sm btn-outline-dark" style="width: 50px;" @onclick="@(() => Display += n)">@n</button>
        }
    </div>
    <div class="d-flex gap-1 mb-1">
        @foreach (var n in new[] { "1", "2", "3" })
        {
            <button class="btn btn-sm btn-outline-dark" style="width: 50px;" @onclick="@(() => Display += n)">@n</button>
        }
    </div>
    <div class="d-flex gap-1">
        <button class="btn btn-sm btn-outline-dark" style="width: 106px;" @onclick="@(() => Display += "0")">0</button>
        <button class="btn btn-sm btn-outline-dark" @onclick="OnShowTemp">Tem</button>
    </div>
</div>

<div class="mb-2 d-flex gap-2">
    <button class="btn btn-sm btn-outline-dark" @onclick="Clear">C</button>
</div>

<div>
    <input type="text" value="@Display" 
           class="form-control form-control-sm bg-white border rounded"
           style="max-width: 300px;" />
</div>

---


<button @onclick="Calc">=</button>

<Button Color="ButtonColor.Primary" @onclick="OnShowModalClick">Show Modal</Button>

<Modal @ref="modal" Title="Ввод формулы показателя">
    <BodyTemplate>
        <div>
            <input type="string" @bind-value="@Input" @bind-value:event="oninput" placeholder="Введите выражение" />
            <!--<button @onclick="@(() => SetInput(Input))">Ввод</button> -->
        </div>


    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Отмена</Button>
        <Button Color="ButtonColor.Primary">Сохранить</Button>
    </FooterTemplate>
</Modal>


<!--Модальное окно выбора показателя-->
<!--В GetItemSelected пердается id выбранной строки из нормативов-->
<Modal @ref="tempModal" Title="Выбрать показатель" Class="modal-lg">
    <BodyTemplate>
        <FormsTemplate OnItemSelected="GetItemSelected" /><FormsTemplate />
    </BodyTemplate>
    <FooterTemplate>
        <Button class="btn btn-secondary" @onclick="OnHideTemp">Закрыть</Button>
    </FooterTemplate>
</Modal>



@if (!string.IsNullOrEmpty(selectedItemName))
{
    /*если была выбрана строка*/
    <p>Выбранное имя: @selectedItemName *</p>
    <p>Формула: @Display</p>
}

@code {
    // внедрение фабрики для создания экземпляров BanksContext.
    [Inject] private IDbContextFactory<BanksContext> dbFactory { get; set; }

    private Modal modal = default!;
    private Modal tempModal = default!;

    private int? selectedItemIdNor;
    private string selectedItemName;

    private async Task GetItemSelected(int id)
    {
        //  создаём новый DbContext, ждём его и автоматически закрываем после использования
        await using var db = dbFactory.CreateDbContext();
        // асинхронный поиск первой записи с id
        var item = await db.TemplatesNors.FirstOrDefaultAsync(n => n.IdTnor == id);
        // если item найден — взять его код;
        selectedItemName = item?.Code.Trim() ?? "Не найдено";
        OnHideTemp();
        if (!string.IsNullOrEmpty(selectedItemName))
        {
            /*если была выбрана строка*/
            Display += selectedItemName;
            Console.WriteLine(Display);
        }
    }


    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }


    private async Task OnShowTemp()
    {
        await tempModal.ShowAsync();
    }

    private async Task OnHideTemp()
    {
        await tempModal.HideAsync();
       
    }
   

}