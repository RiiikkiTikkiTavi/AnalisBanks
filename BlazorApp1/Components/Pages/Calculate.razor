@page "/calculate"
@using BlazorApp1.Models
@using BlazorBootstrap
@using System.Text.RegularExpressions

@rendermode InteractiveServer

<h3>Calculate</h3>

<div class="d-flex align-items-start gap-3 flex-wrap">
<select @bind="SelectedMethod" class="form-select w-25">
    <option disabled value="0">Выберите методику</option>
    @foreach (var meth in methods)
    {
        <option value="@meth.IdMethods">@meth.Name</option>
    }
</select>


    <InputNumber @bind-Value="Regnum" class="form-control w-auto" />
    <InputDate @bind-Value="OnDate" class="form-control w-auto" />


<button class="btn btn-primary" @onclick="Calcs">Рассчитать</button>
</div>

@if (args?.Any() == true)
{
    <ul class="mt-3">
        @foreach (var arg in args)
        {
            <li>@arg.Name</li>
        }
    </ul>
}
<!--else
{
    <div class="text-muted mt-3">Нет показателей для выбранной методики.</div>
    не работает
}-->


<!--Модальное окно выбора показателя-->
<!--В GetItemSelected пердается id и тип выбранной строки-->
<Modal @ref="tempModal" Title="Выбрать показатель" Class="modal-lg">
    <BodyTemplate>
        <FormsTemplate />
    </BodyTemplate>
    <FooterTemplate>
        <Button class="btn btn-secondary" @onclick="OnHideTemp">Закрыть</Button>
    </FooterTemplate>
</Modal>





@code {
    // внедрение фабрики для создания экземпляров BanksContext.
    [Inject] private IDbContextFactory<BanksContext> dbFactory { get; set; }
    private int regnum = 1000;
    private string bankName;
    //private DateTime onDate = DateTime.Today;
    private DateTime onDate = new DateTime(2025, 1, 1); // год - месяц - день;

    private bool isLoading = false;

    private int selectedMethod = 0; // ID формы по умолчанию

    public int Regnum { get => regnum; set => regnum = value; }
    public string BankName { get => bankName; set => bankName = value; }
    public DateTime OnDate { get => onDate; set => onDate = value; }
    private int SelectedMethod
    {
        get => selectedMethod;
        set
        {
            if (selectedMethod != value)
            {
                selectedMethod = value;
                _ = LoadArguments(value);
            }
        }
    }
    private List<Method> methods = new(); // Список методик
    private List<Argument> args;
    private Argument Arg { get; set; } = new();

    private async Task LoadMethods()
    {
        await using var db = dbFactory.CreateDbContext();
        methods = await db.Methods.ToListAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        // Загружаем данные из базы данных
        await LoadMethods();
    }

    private async Task LoadArguments(int idMeth)
    {
        await using var db = dbFactory.CreateDbContext();
        args = await db.Arguments.Where(a => a.IdMethods == idMeth).ToListAsync();
    }
    private async Task OnMethodChanged(ChangeEventArgs e)
    {
        await LoadArguments(selectedMethod);
        StateHasChanged();

    }

    private CreditOrgInfoClient _creditService;
    [Inject]
    public CreditOrgInfoClient CreditService { get => _creditService; set => _creditService = value; }

    private Modal modal = default!;
    private Modal tempModal = default!;

    private async void Calcs2()
    {
        await using var db = dbFactory.CreateDbContext();
        // получить формулу expression показателя по id_arg
        // получить состав формулы consist, который имеет вид А950,А992,А901,
        // представить consist в виде массива
        // найти в таблице data101 по id (950,992,901 соответственно) значения vint
        // заменить параметры (значения в фигурных скобках) в формуле {303П}+{446П}-{446А}*3.4+140 на эти значение vint соответсвенно
        // распарсить формулу и рассчитать значение


    }
    private async void Calcs()
    {
        await using var db = dbFactory.CreateDbContext();

        foreach (var arg in args)
        {
            // 1. Получаем формулу
            string? expression = arg.Expression;
            string? consist = arg.Consist;

            if (string.IsNullOrWhiteSpace(expression) || string.IsNullOrWhiteSpace(consist))
                continue;

            // 2. Разбиваем состав на идентификаторы показателей: "A950,A992,A901" → [950, 992, 901]
            var ids = consist
                .Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(s => s.Trim())
                .Where(s => s.StartsWith("A") && int.TryParse(s[1..], out _))
                .Select(s => int.Parse(s[1..]))
                .Distinct()
                .ToList();

            // 3. Загружаем значения vint из таблицы data101
            var data = await db.Data101s
                .Where(d => ids.Contains(d.IdT101 ?? -1))
                .ToDictionaryAsync(d => d.IdT101 ?? -1, d => d.Vint);

            // 4. Подстановка значений в формулу
            // Пример: {950П} → заменить 950 на значение из data[950], оставив суффикс (П/А) если нужен
            var parsedExpression = Regex.Replace(expression, @"\{(\d+)([ПА]?)\}", match =>
            {
                var idStr = match.Groups[1].Value;
                var suffix = match.Groups[2].Value;
                if (int.TryParse(idStr, out int id) && data.TryGetValue(id, out decimal val))
                {
                    return val.ToString(CultureInfo.InvariantCulture); // корректный формат чисел
                }
                return "0"; // если данных нет — заменяем на 0
            });

            try
            {
                // 5. Вычисляем значение выражения с помощью DataTable.Compute или стороннего парсера
                var result = new DataTable().Compute(parsedExpression, null);
                Console.WriteLine($"Итоговое значение показателя '{arg.Name}' = {result}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при вычислении формулы '{expression}': {ex.Message}");
            }
        }
    }


   
    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }


    private async Task OnShowTemp()
    {
        await tempModal.ShowAsync();
    }

    private async Task OnHideTemp()
    {
        await tempModal.HideAsync();
       
    }
   

}