@page "/args/{idMeth:int}"
@page "/args/{idMeth:int}/{idArg:int}"

@using BlazorApp1.Models
@inject NavigationManager NavigationManager
@inject BanksContext db


@rendermode InteractiveServer

<h3 class="text-center mt-4">
	@(IsEditMode ? "Изменить показатель" : "Добавить показатель")
</h3>

<div class="mb-3">
	<label class="form-label">Название показателя:</label>
	<input class="form-control w-25" placeholder="Введите название" @bind="Arg.Name" />
</div>
<div class="mb-3">
	<label class="form-label">Краткое название показателя:</label>
	<input class="form-control w-25" placeholder="Введите краткое название" @bind="Arg.ShortName" />
</div>
<div class="mb-3">
	<label class="form-label">Описание показателя:</label>
	<input class="form-control flex-grow-1" placeholder="Введите описание" @bind="Arg.Descr" />
</div>
<div class="mt-3">
	<label class="form-label">Формула показателя:</label>
	<input class="form-control" placeholder="Введите формулу" @bind="Arg.Expression" />
</div>

<button class="btn btn-primary mt-3" @onclick="OnSaveClick">
	@(IsEditMode ? "Сохранить" : "Создать")
</button>

	<button class="btn btn-secondary mt-3" @onclick="Close">Отмена</button>
		

@if (showValidationMessage)
{
	<div class="alert alert-warning alert-dismissible fade show mt-2" role="alert">
		Заполните данные
		<button type="button" class="btn-close" @onclick="() => showValidationMessage = false"></button>
	</div>
}


@code {
	[Parameter]
	public int? idMeth { get; set; }
	[Parameter]
	public int? idArg { get; set; }
	private bool IsEditMode => idArg.HasValue; // режим редактирования, показатель уже существует

	private Argument Arg { get; set; } = new();

	private bool showValidationMessage = false;

	protected override async Task OnInitializedAsync()
	{
		if (IsEditMode)
		{
			// загрузка данных по существующему показателю
			Arg = await db.Arguments.FirstOrDefaultAsync(a => a.IdArg == idArg.Value);			
		}
	}

	private async Task OnSaveClick()
	{
		if (IsEditMode)
		{
			UpdadeArg();
		}
		else
		{
			SaveArg();
		}
	}

	// сохранение показателя
	private async Task SaveArg()
	{
		if (string.IsNullOrWhiteSpace(Arg.Name) || string.IsNullOrWhiteSpace(Arg.ShortName) || string.IsNullOrWhiteSpace(Arg.Expression))
		{
			showValidationMessage = true;
			return;
		}
		showValidationMessage = false;
		Arg.IdMethods = idMeth;
		db.Arguments.Add(Arg);  // обновление
		await db.SaveChangesAsync(); // Асинхронное сохранение в базу данных
		idArg = Arg.IdArg; // создание id методики
		//StateHasChanged();
		Console.WriteLine("Save argument");
		NavigationManager.NavigateTo($"/newMethod/{idMeth}");
	}

	// изменение показателя
	private async Task UpdadeArg()
	{
		if (string.IsNullOrWhiteSpace(Arg.Name) || string.IsNullOrWhiteSpace(Arg.ShortName) || string.IsNullOrWhiteSpace(Arg.Expression))
		{
			showValidationMessage = true;
			return;
		}
		showValidationMessage = false; // убрать сообщение
		db.Arguments.Update(Arg);  // запись
		await db.SaveChangesAsync(); // Асинхронное сохранение в базу данных
		Console.WriteLine("Update Method");
		NavigationManager.NavigateTo($"/newMethod/{idMeth}");
	}

	// закрыть форму создания показателя, переход на карточку методики
	private void Close()
	{
		NavigationManager.NavigateTo($"/newMethod/{idMeth}");
		Console.WriteLine("Close Method");
	}

}
