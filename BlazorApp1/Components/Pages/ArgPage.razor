@page "/args/{idMeth:int}"
@page "/args/{idMeth:int}/{idArg:int}"

@using BlazorApp1.Models
@inject NavigationManager NavigationManager


@rendermode InteractiveServer

<h3 class="text-center mt-4">
	@(IsEditMode ? "Изменить показатель" : "Добавить показатель")
</h3>

<div class="mb-3">
	<label class="form-label">Название показателя:</label>
	<input class="form-control w-25" placeholder="Введите название" @bind="Arg.Name" />
</div>
<div class="mb-3">
	<label class="form-label">Краткое название показателя:</label>
	<input class="form-control w-25" placeholder="Введите краткое название" @bind="Arg.ShortName" />
</div>
<div class="mb-3">
	<label class="form-label">Описание показателя:</label>
	<textarea class="form-control w-50"
			  rows="4"
			  placeholder="Введите описание"
			  @bind="Arg.Descr">
	</textarea>
</div>
<div class="mt-3">
	<label class="form-label">Формула показателя:</label>
	<div class="mb-2 d-flex align-items-center gap-2">
		<input type="text" value="@Display"
			   class="form-control w-50"
			   placeholder="Введите формулу" readonly/>
		<button class="btn btn-sm btn-outline-dark" @onclick="Backspace">←</button>
		<button class="btn btn-sm btn-outline-dark" @onclick="Clear">C</button>
	</div>
</div>

<div class="mb-2 d-flex flex-wrap gap-1">
	<button class="btn btn-sm btn-outline-secondary" @onclick="@(() => Display+="+")">+</button>
	<button class="btn btn-sm btn-outline-secondary" @onclick="@(() => Display+="-")">-</button>
	<button class="btn btn-sm btn-outline-secondary" @onclick="@(() => Display+="*")">*</button>
	<button class="btn btn-sm btn-outline-secondary" @onclick="@(() => Display+="/")">/</button>
	<button class="btn btn-sm btn-outline-secondary" @onclick="@(() => Display+="100%")">100%</button>
</div>

<div class="mb-2">
	<div class="d-flex gap-1 mb-1">
		@foreach (var n in new[] { "7", "8", "9" })
		{
			<button class="btn btn-sm btn-outline-dark" style="width: 60px;" @onclick="@(() => Display += n)">@n</button>
		}
	</div>
	<div class="d-flex gap-1 mb-1">
		@foreach (var n in new[] { "4", "5", "6" })
		{
			<button class="btn btn-sm btn-outline-dark" style="width: 60px;" @onclick="@(() => Display += n)">@n</button>
		}
	</div>
	<div class="d-flex gap-1 mb-1">
		@foreach (var n in new[] { "1", "2", "3" })
		{
			<button class="btn btn-sm btn-outline-dark" style="width: 60px;" @onclick="@(() => Display += n)">@n</button>
		}
	</div>
	<div class="d-flex gap-1 mb-1">
		<button class="btn btn-sm btn-outline-dark" style="width: 60px;" @onclick="@(() => Display += "0")">0</button>
		<button class="btn btn-sm btn-outline-dark" style="width: 60px;" @onclick="@(() => Display += ".")">.</button>
		<button class="btn btn-sm btn-outline-dark" style="width: 60px;" @onclick="OnShowTemp">Tem</button>
	</div>
</div>




<button class="btn btn-primary mt-3" @onclick="OnSaveClick">
	@(IsEditMode ? "Сохранить" : "Создать")
</button>

<button class="btn btn-secondary mt-3" @onclick="Close">Отмена</button>


@if (showValidationMessage)
{
	<div class="alert alert-warning alert-dismissible fade show mt-2" role="alert">
		Заполните данные
		<button type="button" class="btn-close" @onclick="() => showValidationMessage = false"></button>
	</div>
}


<!--Модальное окно выбора показателя-->
<!--В GetItemSelected пердается id и тип выбранной строки-->
<Modal @ref="tempModal" Title="Выбрать показатель" Class="modal-lg">
	<BodyTemplate>
		<FormsTemplate OnItemSelected="@GetItemSelected" />
	</BodyTemplate>
	<FooterTemplate>
		<Button class="btn btn-secondary" @onclick="OnHideTemp">Закрыть</Button>
	</FooterTemplate>
</Modal>

@code {
	[Parameter]
	public int? idMeth { get; set; }
	[Parameter]
	public int? idArg { get; set; }
	private bool IsEditMode => idArg.HasValue; // режим редактирования, показатель уже существует


	[Inject] private IDbContextFactory<BanksContext> dbFactory { get; set; }

	private Modal tempModal = default!;

	private string selectedItemName;

	private string display;

	public string Display
	{
		get => display;
		set
		{
			if (string.IsNullOrEmpty(value))
			{
				display = "";
				return;
			}

			char[] operators = ['+', '-', '*', '/', '%'];

			string newValue = value.Trim();

			int n = newValue.Length;

			if (string.IsNullOrEmpty(display))
			{
				// оператор не может быть первым
				if (operators.Contains(newValue[0])) return;

				// точка не может быть первой
				if (newValue[0] == '.') return;

				// Если всё ок — присваиваем
				display = newValue;

			}
			else
			{
				// не может быть два оператора подряд
				if (operators.Contains(display[^1]) && operators.Contains(newValue[^1]))
					return;

				// не может быть оператора после точки
				if (display.EndsWith(".") && operators.Contains(newValue[^1]))
					return;

				// точка не может быть после точки и оператора
				if ((newValue[^1] == '.') && (display.EndsWith(".") || operators.Contains(display[^1])))
					return;

				// после параметров может быть только оператор
				int lastOpenBrace = display.LastIndexOf('{');
				int lastCloseBrace = display.LastIndexOf('}');
				if (lastOpenBrace != -1 && lastCloseBrace > lastOpenBrace && lastCloseBrace == display.Length - 1)
				{
					// Параметр завершён, можно вводить только оператор
					if (!operators.Contains(newValue[^1]))
						return;
				}



				// Если всё ок — присваиваем
				display = newValue;


			}
		}
	}

	private string consist;
	public string Consist { get => consist; set => consist = value; }

	private Argument Arg { get; set; } = new();

	private bool showValidationMessage = false;

	protected override async Task OnInitializedAsync()
	{
		if (IsEditMode)
		{
			await using var db = dbFactory.CreateDbContext();
			// загрузка данных по существующему показателю
			Arg = await db.Arguments.FirstOrDefaultAsync(a => a.IdArg == idArg.Value);
			Display = Arg.Expression;
		}
	}

	private async Task OnSaveClick()
	{
		if (IsEditMode)
		{
			UpdadeArg();
		}
		else
		{
			SaveArg();
		}
	}

	// сохранение показателя
	private async Task SaveArg()
	{
		if (string.IsNullOrWhiteSpace(Arg.Name) || string.IsNullOrWhiteSpace(Arg.ShortName) || string.IsNullOrWhiteSpace(Display))
		{
			showValidationMessage = true;
			return;
		}
		showValidationMessage = false;
		Arg.IdMethods = idMeth;
		Arg.Expression = Display;
		Arg.Consist = Consist;
		await using var db = dbFactory.CreateDbContext();
		db.Arguments.Add(Arg);  // добавление
		await db.SaveChangesAsync(); // Асинхронное сохранение в базу данных
		idArg = Arg.IdArg; // создание id показателя
		Console.WriteLine("Save argument");
		NavigationManager.NavigateTo($"/newMethod/{idMeth}");
	}

	// изменение показателя
	private async Task UpdadeArg()
	{
		if (string.IsNullOrWhiteSpace(Arg.Name) || string.IsNullOrWhiteSpace(Arg.ShortName) || string.IsNullOrWhiteSpace(Arg.Expression))
		{
			showValidationMessage = true;
			return;
		}
		showValidationMessage = false; // убрать сообщение
		Arg.Expression = Display;
		Arg.Consist = Consist;
		await using var db = dbFactory.CreateDbContext();
		db.Arguments.Update(Arg);  // обновление
		await db.SaveChangesAsync(); // Асинхронное сохранение в базу данных
		Console.WriteLine("Update Method");
		NavigationManager.NavigateTo($"/newMethod/{idMeth}");
	}

	// закрыть форму создания показателя, переход на карточку методики
	private void Close()
	{
		NavigationManager.NavigateTo($"/newMethod/{idMeth}");
		Console.WriteLine("Close Method");
	}

	// очистка полей
	public void Clear()
	{
		Display = "";
		Consist = "";
	}

	// стереть последний введенный символ
	private void Backspace()
	{
		Console.WriteLine("Backspace");
		if (!string.IsNullOrEmpty(display))
		{
			// Если последний символ — }, проверим на параметр {…}
			if (display.EndsWith("}"))
			{
				Console.WriteLine("}");
				int openIndex = display.LastIndexOf('{');
				// Если найдена корректно (до последнего символа), обрабатываем параметр
				if (openIndex != -1 && openIndex < display.Length - 1)
				{
					// Удаляем весь параметр
					display = display[..openIndex];
					//return;
				}
				Console.WriteLine("clean");
				// Очистка Consist до второй запятой с конца
				if (!string.IsNullOrEmpty(Consist))
				{
					int lastComma = Consist.LastIndexOf(',');
					Console.WriteLine("lastComma" + lastComma);
					if (lastComma != -1)
					{
						int secondLastComma = Consist.LastIndexOf(',', lastComma - 1);
						Console.WriteLine("secondLastComma" + secondLastComma);
						// Если вторая с конца запятая найдена — обрезаем строку после неё (оставляя её)
						if (secondLastComma != -1)
						{
							Consist = Consist.Substring(0, secondLastComma + 1); // сохраняем вторую запятую
							Console.WriteLine("Consist" + Consist);
						}
						else
						{
							Consist = ""; // если только одна запятая — всё очищаем
						}
					}
				}
				return;

			}
			Display = Display[..^1]; // удаляет последний символ
		}
	}

	// ввод наименований показателей
	private async Task GetItemSelected(string selectedItem)
	{
		int id = 0;

		//  создаём новый DbContext, ждём его и автоматически закрываем после использования
		await using var db = dbFactory.CreateDbContext();

		if (selectedItem.StartsWith("А"))
		{
			id = int.Parse(selectedItem.Substring(1));
			// асинхронный поиск первой записи с id
			var item = await db.Templates101s.FirstOrDefaultAsync(n => n.IdT101 == id);
			// если item найден — взять его код;
			selectedItemName = item?.Name;
			selectedItemName += item?.AP == "1" ? "А" : item?.AP == "2" ? "П" : "";
			selectedItemName = selectedItemName.Trim() ?? "Не найдено";
		}
		if (selectedItem.StartsWith("Н"))
		{
			id = int.Parse(selectedItem.Substring(1));
			// асинхронный поиск первой записи с id
			var item = await db.TemplatesNors.FirstOrDefaultAsync(n => n.IdTnor == id);
			// если item найден — взять его код;
			selectedItemName = item?.Code.Trim() ?? "Не найдено";

		}

		OnHideTemp(); // убрать форму

		if (!string.IsNullOrEmpty(selectedItemName))
		{
			/*если была выбрана строка*/
			Display += "{" + selectedItemName + "}";
			Consist += selectedItem + ",";
			Console.WriteLine(Display);
			Console.WriteLine(Consist);

		}
	}

	// показать окно выбора показателей из отчетных форм
	private async Task OnShowTemp()
	{
		await tempModal.ShowAsync();
	}

	// скрыть окно выбора показателей из отчетных форм
	private async Task OnHideTemp()
	{
		await tempModal.HideAsync();

	}
}
