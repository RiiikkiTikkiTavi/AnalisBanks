@page "/new_method/{idMeth:int}"
@* @page "/edit_method/{id:int}" *@

@using BlazorApp1.Models
@inject BanksContext db
@inject NavigationManager NavigationManager


@rendermode InteractiveServer

<h3 class="text-center mt-4">Добавить методику</h3>
<div>
<div class="mb-3">
	<label class="form-label">Название методики:</label>
	<input class="form-control w-50" @bind="NewMethod.Name" />
</div>
<div class="mb-3">
	<label class="form-label">Описание:</label>
	<textarea class="form-control w-50" @bind="NewMethod.Descr"></textarea>
</div>
<div class="d-flex">
	<button class="btn btn-primary me-2" @onclick="SaveMethod">Сохранить</button>
	<button class="btn btn-secondary" @onclick="Close">Отмена</button>
</div>
</div>


@if (isCreateMode)
    {
	<div>
	<h5 class="mt-4">Добавить показатели</h5>
	<button class="btn btn-secondary" @onclick="AddArg">Добавить</button>
		@if (args != null)
		{
			<table class="table">
				<thead>
					<tr>
						<th>Название</th>
						<th>Краткое название</th>
						<th>Описание</th>
						<th>Формула</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var a in args)
					{
						<tr>
							<td>@a.Name</td>
							<td>@a.ShortName</td>
							<td>@a.Descr</td>
							<td>@a.Expression</td>
						</tr>
					}
				</tbody>
			</table>
		}
	@if (isNewArg)
	{
		<div class="mt-3 d-flex gap-3">
			<input class="form-control w-25" placeholder="Введите название" @bind="Arg.Name" />
			<input class="form-control w-25" placeholder="Введите краткое название" @bind="Arg.ShortName" />
			<input class="form-control flex-grow-1" placeholder="Введите описание" @bind="Arg.Descr" />
		</div>
		<div class="mt-3">
			<input class="form-control" placeholder="Введите формулу" @bind="Arg.Expression" />
		</div>
			<button class="btn btn-secondary mt-3" @onclick="CreateArg">Создать</button>
	}
</div>
	}


@code {
	[Parameter]
	public int idMeth { get; set; }

	private Method NewMethod { get; set; } = new();
	private Argument Arg { get; set; } = new();
	private List<Argument> args;
	private bool isCreateMode = false;
	private bool isNewArg = false;
	//private int idMeth;

	protected override async Task OnInitializedAsync()
	{
		NewMethod = await db.Methods.FindAsync(idMeth);
		if (NewMethod != null)
		{
			args = await db.Arguments.Where(a => a.IdMethods == idMeth).ToListAsync();
        }
    }


	private async Task SaveMethod()
	{

		//NewMethod = await db.Methods.FindAsync(idMeth);
		//if (NewMethod == null)
		if (string.IsNullOrWhiteSpace(NewMethod.Name) || string.IsNullOrWhiteSpace(NewMethod.Descr))
		{
			return;
		}
		var entry = db.Entry(NewMethod);
		
		//db.Methods.Add(NewMethod);
		//await db.SaveChangesAsync(); // Асинхронное сохранение в базу данных
		//NavigationManager.NavigateTo("/methods");
		idMeth = NewMethod.IdMethods;
		Console.WriteLine("SaveMethod");
		isCreateMode = true;


	}

	// закрыть форму создания методик
	private void Close()
	{
		NavigationManager.NavigateTo("/methods");
		Console.WriteLine("Close Method");
		//NewMethod = new Method(); // Очистить данные формы, например

	}

	// показать форму создания показателей
	private void AddArg()
	{
		isNewArg = true;

	}

	// создать показатель
	private async Task CreateArg()
	{
		var entry = db.Entry(Arg);
		Arg.IdMethods = idMeth;
		// Arg.Consist = 
		db.Arguments.Add(Arg);
		await db.SaveChangesAsync();
		Console.WriteLine("CreateArg");
		StateHasChanged();
	}

}