@page "/new_method/{idMeth:int}"
@page "/new_method"

@using BlazorApp1.Models
@inject BanksContext db
@inject NavigationManager NavigationManager


@rendermode InteractiveServer

<h3 class="text-center mt-4">
	@(IsEditMode ? "Изменить методику" : "Добавить методику")
</h3>
<div>
<div class="mb-3">
	<label class="form-label">Название методики:</label>
	<input class="form-control w-50" @bind="NewMethod.Name" />
</div>
<div class="mb-3">
	<label class="form-label">Описание:</label>
	<textarea class="form-control w-50" @bind="NewMethod.Descr"></textarea>
</div>
<div class="d-flex">
		<button class="btn btn-primary me-2" @onclick="OnSaveClick">
			@(IsEditMode ? "Сохранить изменения" : "Создать методику")
		</button>
	<button class="btn btn-secondary" @onclick="Close">Отмена</button>
</div>
</div>


@if (IsEditMode)
    {
	<div>
	<h5 class="mt-4">Показатели</h5>
	<button class="btn btn-secondary" @onclick="AddArg">Добавить</button>
		@if (args != null)
		{
			<table class="table">
				<thead>
					<tr>
						<th>Название</th>
						<th>Краткое название</th>
						<th>Описание</th>
						<th>Формула</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var a in args)
					{
						<tr>
							<td>@a.Name</td>
							<td>@a.ShortName</td>
							<td>@a.Descr</td>
							<td>@a.Expression</td>
						</tr>
					}
				</tbody>
			</table>
		}
	@if (isNewArg)
	{
		<div class="mt-3 d-flex gap-3">
			<input class="form-control w-25" placeholder="Введите название" @bind="Arg.Name" />
			<input class="form-control w-25" placeholder="Введите краткое название" @bind="Arg.ShortName" />
			<input class="form-control flex-grow-1" placeholder="Введите описание" @bind="Arg.Descr" />
		</div>
		<div class="mt-3">
			<input class="form-control" placeholder="Введите формулу" @bind="Arg.Expression" />
		</div>
			<button class="btn btn-secondary mt-3" @onclick="CreateArg">Создать</button>
	}
</div>
	}

@if (showValidationMessage)
{
	<div class="alert alert-warning alert-dismissible fade show mt-2" role="alert">
		Заполните данные
		<button type="button" class="btn-close" @onclick="() => showValidationMessage = false"></button>
	</div>
}


@code {
	[Parameter]
	public int ?idMeth { get; set; }
	private bool IsEditMode => idMeth.HasValue;

	private Method NewMethod { get; set; } = new();
	private Argument Arg { get; set; } = new();
	private List<Argument> args;
	private bool isNewArg = false;

	private bool showValidationMessage = false;

	protected override async Task OnInitializedAsync()
	{
		if (IsEditMode)
		{
			var method = await db.Methods.FindAsync(idMeth.Value);
			if (method != null)
			{
				NewMethod = method;
				args = await db.Arguments.Where(a => a.IdMethods == idMeth).ToListAsync();
			}
		}
	}

	private async Task OnSaveClick()
	{
		if (IsEditMode)
		{
			UpdadeMethod();
		}
		else
		{
			SaveMethod();
		}
	}
	private async Task SaveMethod()
	{
		if (string.IsNullOrWhiteSpace(NewMethod.Name) || string.IsNullOrWhiteSpace(NewMethod.Descr))
		{
			showValidationMessage = true;
			return;
		}
		showValidationMessage = false;
		db.Methods.Add(NewMethod);	// обновление
		await db.SaveChangesAsync(); // Асинхронное сохранение в базу данных
		idMeth = NewMethod.IdMethods; // создание id методики
		StateHasChanged();
		Console.WriteLine("Save Method");
	}

	private async Task UpdadeMethod()
	{
		if (string.IsNullOrWhiteSpace(NewMethod.Name) || string.IsNullOrWhiteSpace(NewMethod.Descr))
		{
			showValidationMessage = true; // сообщение заполнить данные
			return;
		}
		showValidationMessage = false; // убрать сообщение
		db.Methods.Update(NewMethod);  // запись
		await db.SaveChangesAsync(); // Асинхронное сохранение в базу данных
		idMeth = NewMethod.IdMethods; // создание id методики
		StateHasChanged();
		Console.WriteLine("Update Method");
	}
	// закрыть форму создания методик, переход на список методик
	private void Close()
	{
		NavigationManager.NavigateTo("/methods");
		Console.WriteLine("Close Method");
	}

	// показать форму создания показателей
	private void AddArg()
	{
		isNewArg = true;
		Console.WriteLine("Show arguments form");
	}

	// создать показатель
	private async Task CreateArg()
	{
		Arg.IdMethods = idMeth; // установка номера методики для показателя
		// Arg.Consist = 
		db.Arguments.Add(Arg); // запись показателя
		await db.SaveChangesAsync(); // сохранение
		args = await db.Arguments.Where(a => a.IdMethods == idMeth).ToListAsync(); // обновление списка показателей в методике
		Arg = new Argument(); // обнуление, создание нового объекта показателей

		StateHasChanged();
		Console.WriteLine("CreateArg");
	}

}