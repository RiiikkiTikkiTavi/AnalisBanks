@page "/newMethod/{idMeth:int}"
@page "/newMethod"

@using BlazorApp1.Models
@inject NavigationManager NavigationManager


@rendermode InteractiveServer

<h3 class="text-center mt-4">
	@(IsEditMode ? "Изменить методику" : "Добавить методику")
</h3>
<div>
<div class="mb-3">
	<label class="form-label">Название методики:</label>
	<input class="form-control w-50" @bind="NewMethod.Name" />
</div>
<div class="mb-3">
	<label class="form-label">Описание:</label>
		<textarea class="form-control w-50"
				  rows="4"
				  placeholder="Введите описание"
				  @bind="NewMethod.Descr">
	</textarea>
</div>
<div class="d-flex">
		<button class="btn btn-primary me-2" @onclick="OnSaveClick">
			@(IsEditMode ? "Сохранить изменения" : "Создать методику")
		</button>
	<button class="btn btn-secondary" @onclick="Close">Отмена</button>
</div>
</div>


@if (IsEditMode)
    {
	<div>
	<h5 class="mt-4">Показатели</h5>
	<button class="btn btn-secondary" @onclick="AddArg2">Добавить</button>
		@if (args != null && args.Any())
		{
			<table class="table" oncontextmenu="return false;">
				<thead>
					<tr>
						<th>Название</th>
						<th>Краткое название</th>
						<th>Описание</th>
						<th>Формула</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var a in args)
					{
						<tr @oncontextmenu="e => ShowContextMenu(e, a)">
							<td>@a.Name</td>
							<td>@a.ShortName</td>
							<td>@a.Descr</td>
							<td>@a.Expression</td>
						</tr>
					}
				</tbody>
			</table>
		}
</div>
	}

@if (showValidationMessage)
{
	<div class="alert alert-warning alert-dismissible fade show mt-2" role="alert">
		Заполните данные
		<button type="button" class="btn-close" @onclick="() => showValidationMessage = false"></button>
	</div>
}

<!-- Контекстное меню -->
@if (showMenu)
{
	<div class="context-menu" style="top:@menuY; left:@menuX;">
		<ul class="dropdown-menu show">
			<li><a class="dropdown-item" @onclick="EditArg">Редактировать</a></li>
			<li><a class="dropdown-item text-danger" @onclick="DeleteArg">Удалить</a></li>
		</ul>
	</div>
}

<style>
	.context-menu {
		position: absolute;
		z-index: 1000;
	}
</style>

@code {
	[Parameter]
	public int ?idMeth { get; set; }

	[Inject] private IDbContextFactory<BanksContext> dbFactory { get; set; }

	private bool showMenu = false;
    private string menuX = "0px";
    private string menuY = "0px";
	private Argument? selectedArg;

	private bool IsEditMode => idMeth.HasValue;

	private Method NewMethod { get; set; } = new();
	private Argument Arg { get; set; } = new();
	private List<Argument> args;

	private bool showValidationMessage = false;

	// загрузка данных по существующей методике
	protected override async Task OnInitializedAsync()
	{
		if (IsEditMode)
		{
			await using var db = dbFactory.CreateDbContext();
			var method = await db.Methods.FindAsync(idMeth.Value);
			if (method != null)
			{
				NewMethod = method;
				args = await db.Arguments.Where(a => a.IdMethods == idMeth).ToListAsync();
				StateHasChanged();
			}
		}
	}

	private async Task OnSaveClick()
	{
		if (IsEditMode)
		{
			UpdadeMethod();
		}
		else
		{
			SaveMethod();
		}
	}

	// сохранение методики
	private async Task SaveMethod()
	{
		if (string.IsNullOrWhiteSpace(NewMethod.Name) || string.IsNullOrWhiteSpace(NewMethod.Descr))
		{
			showValidationMessage = true;
			return;
		}
		showValidationMessage = false;
		await using var db = dbFactory.CreateDbContext();
		db.Methods.Add(NewMethod);	// обновление
		await db.SaveChangesAsync(); // Асинхронное сохранение в базу данных
		idMeth = NewMethod.IdMethods; // создание id методики
		StateHasChanged();
		Console.WriteLine("Save Method");
	}

	// обновление методики
	private async Task UpdadeMethod()
	{
		if (string.IsNullOrWhiteSpace(NewMethod.Name) || string.IsNullOrWhiteSpace(NewMethod.Descr))
		{
			showValidationMessage = true; // сообщение заполнить данные
			return;
		}
		await using var db = dbFactory.CreateDbContext();
		showValidationMessage = false; // убрать сообщение
		db.Methods.Update(NewMethod);  // запись
		await db.SaveChangesAsync(); // Асинхронное сохранение в базу данных
		idMeth = NewMethod.IdMethods; // создание id методики
		StateHasChanged();
		Console.WriteLine("Update Method");
	}

	// закрыть форму создания методик, переход на список методик
	private void Close()
	{
		NavigationManager.NavigateTo("/methods");
		Console.WriteLine("Close Method");
	}

	// показать форму создания показателей
	private void AddArg2()
	{
		NavigationManager.NavigateTo($"/args/{idMeth}");
	}

	// контекстное меню на редактирование и удаление показателей
	private void ShowContextMenu(MouseEventArgs e, Argument argument)
	{
		selectedArg = argument;
		showMenu = true;
		menuX = $"{e.ClientX}px";
		menuY = $"{e.ClientY}px";
		StateHasChanged();
	}

	// перейте на форму редактирования показателя
	private void EditArg()
	{
		if (selectedArg != null)
		{
			NavigationManager.NavigateTo($"/args/{selectedArg.IdMethods}/{selectedArg.IdArg}");
		}
		showMenu = false;
	}

	// удалить показатель
	private async Task DeleteArg()
	{
		if (selectedArg != null)
		{
			await using var db = dbFactory.CreateDbContext();
			db.Arguments.Remove(selectedArg);
			await db.SaveChangesAsync();
			args = await db.Arguments.Where(a => a.IdMethods == idMeth).ToListAsync(); // обновление списка показателей в методике
			StateHasChanged();
		}
		showMenu = false;
	}

}