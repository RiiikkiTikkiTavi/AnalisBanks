namespace BlazorApp1.Components.Pages
{
    public partial class ArgPage
    {
    }
}
using MathNet.Symbolics;
using Microsoft.AspNetCore.Components;

namespace BlazorApp1.Components.Pages
{
	public partial class Calculate : ComponentBase
	{


		private string input = "";
		private double result3 = 0;
		private string display;
        private string consist;


        public string Input { get => input; set => input = value; }

        public string Display
        {
            get => display;
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    display = "";
                    return;
                }

                char[] operators = ['+', '-', '*', '/', '%'];

                string newValue = value.Trim();

                int n = newValue.Length;

                if (string.IsNullOrEmpty(display)){
                    // оператор не может быть первым
                    if (operators.Contains(newValue[0])) return;

                    // точка не может быть первой
                    if(newValue[0] == '.') return;

                    // Если всё ок — присваиваем
                    display = newValue;

                }
                else
                {
                    // не может быть два оператора подряд
                    if (operators.Contains(display[^1]) && operators.Contains(newValue[^1]))
                        return;

                    // не может быть оператора после точки
                    if (display.EndsWith(".") && operators.Contains(newValue[^1]))
                        return;

                    // точка не может быть после точки и оператора
                    if ((newValue[^1] == '.') && (display.EndsWith(".") || operators.Contains(display[^1])))
                        return;

                    // после параметров может быть только оператор
                    int lastOpenBrace = display.LastIndexOf('{');
                    int lastCloseBrace = display.LastIndexOf('}');
                    if (lastOpenBrace != -1 && lastCloseBrace > lastOpenBrace && lastCloseBrace == display.Length - 1)
                    {
                        // Параметр завершён, можно вводить только оператор
                        if (!operators.Contains(newValue[^1]))
                            return;
                    }



                    // Если всё ок — присваиваем
                    display = newValue;


                }

/*
                // Если первый символ — оператор, не устанавливаем
                if (string.IsNullOrEmpty(display) && operators.Contains(newValue[0]))
                    return;

                // Запрещаем начинать с точки
                if (string.IsNullOrEmpty(display) && newValue[0] == '.')
                    return;

                // Проверка на два оператора подряд
                if (!string.IsNullOrEmpty(display) &&
                    operators.Contains(display[^1]) &&
                    operators.Contains(newValue[^1]))
                    return;

                // Запрещаем точку сразу после оператора или двойную точку
                if (newValue[^1] == '.')
                {
                    if (display.EndsWith(".") || (!string.IsNullOrEmpty(display) && operators.Contains(display[^1])))
                        return;
                }
                /*
                // Запрещаем оператор сразу после точки
                if (display.EndsWith(".") && operators.Contains(newValue[0]))
                    return;
*/
                

                // Запрещаем точку, если в числе она уже была

                // Если всё ок — присваиваем
               // display = newValue;

            }
        }

        public string Consist { get => consist; set => consist = value; }


        public void Calc(string expr, string con)
        {

        }


        // метод расчета выражений
        public void Calc2()
		{
			var expr = Infix.ParseOrThrow(Input);

			// Создаем словарь значений переменных
			var variables = new Dictionary<string, FloatingPoint> { { ("x"), 1 } };

			// Вычисляем выражение с подстановкой значений
			result3 = Evaluate.Evaluate(variables, expr).RealValue;

			Console.WriteLine($"Result: {Display}");
		}

		// очистка полей
		public void Clear()
		{
			Display = "";
			result3 = 0;
		}

	}
}
using System;
using System.Data;
using Microsoft.AspNetCore.Components;


namespace BlazorApp1.Components.Pages
{
	public partial class FormsData : ComponentBase
	{	

		// можно добавить фильтрацию-поиск по колонкам
		// https://blazor.syncfusion.com/documentation/datagrid/filtering

		private int regnum = 1000;
		private string bankName;
		//private DateTime onDate = DateTime.Today;
		private DateTime onDate = new DateTime(2025, 1, 1); // год - месяц - день;
		DataSet ds;
		private bool isLoading = false;
		private bool showNulls = false;
		private bool ShowToast = false;
		private string ToastMessage = "";

		private int selectedForm = 135; // ID формы по умолчанию
		private List<int> formNumber = new() { 123, 135, 101 }; // Пример списка форм

		private CreditOrgInfoClient _creditService;

		public int Regnum { get => regnum; set => regnum = value; }
		public string BankName { get => bankName; set => bankName = value; }
		public DateTime OnDate { get => onDate; set => onDate = value; }
		public DataSet Ds { get => ds; set => ds = value; }
		public bool IsLoading { get => isLoading; set => isLoading = value; }
		public bool ShowNulls { get => showNulls; set => showNulls = value; }
		public int SelectedForm { get => selectedForm; set => selectedForm = value; }
		public List<int> FormNumber { get => formNumber; set => formNumber = value; }

		[Inject]
		public CreditOrgInfoClient CreditService { get => _creditService; set => _creditService = value; }
		

		private async Task LoadData2()
		{

			BankName = await CreditService.GetBankNameByRegnum(Regnum);
			Console.WriteLine($"Name: {BankName}");

		}

		// загрузка данных в зависимости от выбранной формы, банка и даты
		public async Task LoadData()
		{

			IsLoading = true; // Показываем "Загрузка данных..."
			StateHasChanged(); // Принудительно обновляем UI
			switch (SelectedForm)
			{
				case 123:
					Ds = await CreditService.GetData123(Regnum, OnDate);
					Console.WriteLine("form 123");
					break;
				case 135:
					Ds = await CreditService.GetData135(Regnum, OnDate);
					Console.WriteLine("form 135");
					break;
				case 101:
					Ds = await CreditService.GetData101(Regnum, OnDate);
					Console.WriteLine("form 101");
					break;

			}

			IsLoading = false; // Данные загружены, скрываем "Загрузка данных..."
			StateHasChanged(); // Обновляем UI снова

		}

		public async Task SaveData()
		{

			IsLoading = true; // Показываем "Загрузка данных..."
			StateHasChanged(); // Принудительно обновляем UI
			switch (SelectedForm)
			{
				case 123:
					await CreditService.LoadData123(Regnum, OnDate);
					ToastMessage = "Данные 123 формы загружены";
					Console.WriteLine("load 123");
					break;
				case 135:
					await CreditService.LoadData135(Regnum, OnDate);
					ToastMessage = "Данные 135 формы загружены";
					Console.WriteLine("load 135");
					break;
				case 101:
					await CreditService.LoadData101(Regnum, OnDate);
					ToastMessage = "Данные 101 формы загружены";
					Console.WriteLine("load 101");
					break;

			}

			IsLoading = false; // Данные загружены, скрываем "Загрузка данных..."
			ShowToast = true;
			StateHasChanged();

			// Автоматически скрыть через 3 секунды
			await Task.Delay(3000);
			ShowToast = false;
			
			StateHasChanged(); // Обновляем UI снова

		}

		// проверить содержит ли строка null-значения
		public bool ContainsNull(DataRow row)
		{
			return row.ItemArray.Any(item => item == DBNull.Value || item == null);
		}
	}
}
namespace BlazorApp1.Components.Pages
{
	public partial class FormsTemplate
	{
	}
}
using Microsoft.AspNetCore.Components;

namespace BlazorApp1.Components.Pages
{
	public partial class MethodWork : ComponentBase
	{
		public void CreateMethods() { }

	}
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     Р­С‚РѕС‚ РєРѕРґ СЃРѕР·РґР°РЅ РїСЂРѕРіСЂР°РјРјРѕР№.
//     РСЃРїРѕР»РЅСЏРµРјР°СЏ РІРµСЂСЃРёСЏ:4.0.30319.42000
//
//     РР·РјРµРЅРµРЅРёСЏ РІ СЌС‚РѕРј С„Р°Р№Р»Рµ РјРѕРіСѓС‚ РїСЂРёРІРµСЃС‚Рё Рє РЅРµРїСЂР°РІРёР»СЊРЅРѕР№ СЂР°Р±РѕС‚Рµ Рё Р±СѓРґСѓС‚ РїРѕС‚РµСЂСЏРЅС‹ РІ СЃР»СѓС‡Р°Рµ
//     РїРѕРІС‚РѕСЂРЅРѕР№ РіРµРЅРµСЂР°С†РёРё РєРѕРґР°.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("BlazorApp1")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+c2c93cb36bf2fcb1b3ccee53b236e3f02e9ff936")]
[assembly: System.Reflection.AssemblyProductAttribute("BlazorApp1")]
[assembly: System.Reflection.AssemblyTitleAttribute("BlazorApp1")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// РЎРѕР·РґР°РЅРѕ РєР»Р°СЃСЃРѕРј WriteCodeFragment MSBuild.

// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;
//------------------------------------------------------------------------------
// <auto-generated>
//     Р­С‚РѕС‚ РєРѕРґ СЃРѕР·РґР°РЅ РїСЂРѕРіСЂР°РјРјРѕР№.
//     РСЃРїРѕР»РЅСЏРµРјР°СЏ РІРµСЂСЃРёСЏ:4.0.30319.42000
//
//     РР·РјРµРЅРµРЅРёСЏ РІ СЌС‚РѕРј С„Р°Р№Р»Рµ РјРѕРіСѓС‚ РїСЂРёРІРµСЃС‚Рё Рє РЅРµРїСЂР°РІРёР»СЊРЅРѕР№ СЂР°Р±РѕС‚Рµ Рё Р±СѓРґСѓС‚ РїРѕС‚РµСЂСЏРЅС‹ РІ СЃР»СѓС‡Р°Рµ
//     РїРѕРІС‚РѕСЂРЅРѕР№ РіРµРЅРµСЂР°С†РёРё РєРѕРґР°.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ProvideApplicationPartFactoryAttribute("Microsoft.AspNetCore.Mvc.ApplicationParts.ConsolidatedAssemblyApplicationPartFact" +
    "ory, Microsoft.AspNetCore.Mvc.Razor")]

// РЎРѕР·РґР°РЅРѕ РєР»Р°СЃСЃРѕРј WriteCodeFragment MSBuild.

/* Класс для работы с загрузкой данных из ЦБ*/

using BlazorApp1.Models;
using global::CregitInfoWS;
using Google.Protobuf.WellKnownTypes;
using Microsoft.AspNetCore.Components;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Data;
using System.Linq;
using System.ServiceModel;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Linq;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace BlazorApp1
{
	public class CreditOrgInfoClient
	{
		private readonly CreditOrgInfoSoap _client;
		
		private readonly IDbContextFactory<BanksContext> dbFactory;
		public CreditOrgInfoClient(CreditOrgInfoSoap client, IDbContextFactory<BanksContext> dbFactory)
		{
			_client = client;
			this.dbFactory = dbFactory;
		}

		private bool rewrite = false;

		//вспомогательный метод - вывод dataset в консоль
		private void ShowDataSet(DataSet dataSet)
		{
			foreach (DataTable table in dataSet.Tables)
			{
				Console.WriteLine($"Таблица: {table.TableName}");

				// Вывод заголовков колонок
				Console.WriteLine(string.Join(" | ", table.Columns.Cast<DataColumn>().Select(col => col.ColumnName)));

				// Разделитель
				Console.WriteLine(new string('-', 50));

				// Вывод всех строк
				foreach (DataRow row in table.Rows)
				{
					Console.WriteLine(string.Join(" | ", row.ItemArray));
				}

				Console.WriteLine(new string('=', 50)); // Разделитель между таблицами
			}
		}


		// получение наименования банка по рег. номеру
		public async Task<string> GetBankNameByRegnum(int regnum)
		{
			double internal_code = await _client.RegNumToIntCodeAsync(regnum);
			if (internal_code == -1) return "";
			XmlNode xmlResponse = await _client.CreditInfoByIntCodeXMLAsync(internal_code);

			if (xmlResponse == null) return "";
			XmlDocument xmlDoc = new XmlDocument();
			xmlDoc.LoadXml(xmlResponse.OuterXml);

			XmlNode? orgNameNode = xmlDoc.SelectSingleNode("//OrgName");
			return orgNameNode?.InnerText ?? "";
		}

		// получение данных по форме 123 по рег. номеру банка и дате
		public async Task<DataSet> GetData123(int regnum, DateTime dt)
		{
			var response = await _client.Data123FormFullAsync(regnum, dt);

			if (response == null || response.Nodes == null || response.Nodes.Count == 0)
				return null; // Если данные пустые

			// Оборачиваем полученные XML-элементы в общий корневой узел
			XDocument xmlDoc = new XDocument(
				new XDeclaration("1.0", "utf-8", null), // Добавляем заголовок XML
				new XElement("Root", response.Nodes)
			);

			DataSet dataSet = new DataSet();

			using (XmlReader xmlReader = xmlDoc.CreateReader())
			{
				dataSet.ReadXml(xmlReader); // Читаем XML
			}

			ShowDataSet(dataSet);

			return dataSet;
		}

        // получение данных по форме 135 по рег. номеру банка и дате
        public async Task<DataSet> GetData135(int regnum, DateTime dt)
        {
            // список колонок, которые необходимо убрать при выводе
            List<string> columnsToDelete = new List<string> { "V3_2", "V3_3" };

            var response = await _client.Data135FormFullAsync(regnum, dt);

            if (response == null || response.Nodes == null || response.Nodes.Count == 0)
                return null; // Если данные пустые

            // Оборачиваем полученные XML-элементы в общий корневой узел
            XDocument xmlDoc = new XDocument(
                new XDeclaration("1.0", "utf-8", null), // Добавляем заголовок XML
                new XElement("Root", response.Nodes)
            );

            DataSet dataSet = new DataSet();

            using (XmlReader xmlReader = xmlDoc.CreateReader())
            {
                dataSet.ReadXml(xmlReader); // Читаем XML
            }

            // убираем пустую инфу, делаем корректный вывод
            foreach (DataTable table in dataSet.Tables.Cast<DataTable>().ToList())
            {
                if (table.Rows.Count == 0) // Проверяем, пустая ли таблица
                {
                    dataSet.Tables.Remove(table); // Удаляем таблицу
                }
                else // если таблица не пуста, удаляем лишние столбцы
                {
                    foreach (var columnName in columnsToDelete)
                    {
                        if (table.Columns.Contains(columnName)) // Проверяем, есть ли столбец
                        {
                            table.Columns.Remove(columnName);
                        }
                    }
                }
            }

            ShowDataSet(dataSet);

            return dataSet;
        }

		// загрузка данных нормативов в базу 
        private async Task LoadData(
			int regnum,
			DateTime dt,
			string codeColumn,
			string valueColumn,
			Func<Task<DataSet>> getDataFunc)
		{
			// Получаем контекст базы данных
			await using var db = dbFactory?.CreateDbContext();
			if (db == null)
			{
				Console.WriteLine("Ошибка: dbFactory == null");
				return;
			}

			// Загружаем данные формы
			var dataSet = await getDataFunc();
			if (dataSet == null) return;

			// Получаем идентификатор расчета (id_info)
			int id_info = await CreateLoadInfo(regnum, dt);

			var incomingRecords = new List<DataNor>();    // Список новых записей для сохранения
			var validTnors = new HashSet<int>();          // Список id_tnor, найденных по кодам шаблонов

			// Обход всех таблиц и строк внутри DataSet
			foreach (var table in dataSet.Tables.Cast<DataTable>())
			{
				foreach (DataRow row in table.Rows)
				{
					var code = row[codeColumn]?.ToString();
					// пропуск пустых шаблонов
					if (string.IsNullOrWhiteSpace(code)) continue;

					// Ищем соответствующий шаблон в базе
					var id_tnor = await db.TemplatesNors
										  .Where(t => t.Code == code)
										  .Select(t => (int?)t.IdTnor)
										  .FirstOrDefaultAsync();

					// Пропускаем, если шаблон не найден
					if (id_tnor == null) continue;

					// Пробуем распарсить значение кода в decimal
					if (!decimal.TryParse(row[valueColumn]?.ToString(), out var val)) continue;

					// Добавляем id_tnor в набор для возможного удаления старых записей
					validTnors.Add(id_tnor.Value);

					// Добавляем запись в список
					incomingRecords.Add(new DataNor
					{
						IdInfo = id_info,
						IdTnor = id_tnor.Value,
						Val = val
					});
				}
			}

			if (!incomingRecords.Any()) return;

			// Получаем существующие записи из базы
			var existingRecords = await db.DataNors
				.Where(r => r.IdInfo == id_info && r.IdTnor != null && validTnors.Contains(r.IdTnor.Value))
				.ToListAsync();

			foreach (var newRecord in incomingRecords)
			{
				var existing = existingRecords.FirstOrDefault(r => r.IdTnor == newRecord.IdTnor);
				if (existing != null)
				{
					// Обновляем существующее значение
					existing.Val = newRecord.Val;
				}
				else
				{
					// Добавляем новое
					db.DataNors.Add(newRecord);
				}
			}

			await db.SaveChangesAsync();
		}

		//загрузка 123 формы в базу
		public async Task LoadData123(int regnum, DateTime dt)
		{
			await LoadData(
				regnum,
				dt,
				codeColumn: "CODE",
				valueColumn: "VALUE",
				getDataFunc: () => GetData123(regnum, dt)
			);
		}

        //загрузка 135 формы в базу
        public async Task LoadData135(int regnum, DateTime dt)
		{
			await LoadData(
				regnum,
				dt,
				codeColumn: "C3",
				valueColumn: "V3",
				getDataFunc: () => GetData135(regnum, dt)
			);
		}

		// получение данных по форме 101 по рег. номеру банка и дате
		public async Task<DataSet> GetData101(int regnum, DateTime dt)
		{
			// список колонок, которые необходимо оставить при выводе
			List<string> columnsToKeep = new List<string> { "pln", "ap", "numsc", "vitg", "iitg", "priz", "Column1" };

			var response = await _client.Data101FNewAsync(regnum, dt);

			if (response == null || response.Nodes == null || response.Nodes.Count == 0)
				return null; // Если данные пустые

			// Оборачиваем полученные XML-элементы в общий корневой узел
			XDocument xmlDoc = new XDocument(
				new XDeclaration("1.0", "utf-8", null), // Добавляем заголовок XML
				new XElement("Root", response.Nodes)
			);

			DataSet dataSet = new DataSet();

			using (XmlReader xmlReader = xmlDoc.CreateReader())
			{
				dataSet.ReadXml(xmlReader); // Читаем XML
			}

			// Удаляем таблицу F1011, если она есть
			if (dataSet.Tables.Contains("F1011"))
			{
				dataSet.Tables.Remove("F1011");
			}

			// убираем пустую инфу, делаем корректный вывод
			foreach (DataTable table in dataSet.Tables)
			{
				var columnsToRemove = table.Columns.Cast<DataColumn>() // преобразование table.Columns в IEnumerable<DataColumn>, чтобы применить LINQ.
										.Select(c => c.ColumnName)  // получение списка имен столбцов
										.Except(columnsToKeep)  // оставляет только те элементы, которые не входят в columnsToKeep
										.ToList();

				foreach (string columnName in columnsToRemove)
				{
					table.Columns.Remove(columnName); // удаление лишних колонок
				}
			}

			ShowDataSet(dataSet);

			return dataSet;
        }

		// загрузка данных по 101 форме в базу данных
		public async Task LoadData101(int regnum, DateTime dt)
		{
			await using var db = dbFactory?.CreateDbContext(); 
			if (db == null)
			{
				Console.WriteLine("Ошибка: dbFactory == null");
				return;
			}
			// загрузить 101 форму в dataset
			var dataSet = await GetData101(regnum, dt);
			// объявление списка записей для сохранения в базу
            var data101Records = new List<Data101>();
            // если данные есть
            if (dataSet == null) return;

            // получить словарь соответсвий (ap, numsc) - id_t101 шаблона 101 формы
            var id_t101s = await FindTemplateId101(dataSet);
			// получить id расчета
			int id_info = await CreateLoadInfo(regnum, dt);

			// удалить старые данные
			if (rewrite)
			{
				var existingRecords = await db.Data101s
											  .Where(d => d.IdInfo == id_info)
											  .ToListAsync();
				db.Data101s.RemoveRange(existingRecords);
				await db.SaveChangesAsync();
			}

			foreach (DataTable table in dataSet.Tables)
            {
                foreach (DataRow row in table.Rows)
                {
                    string? ap = row["ap"]?.ToString();
                    string? numsc = row["numsc"]?.ToString();
                    string? pln = row["pln"]?.ToString();

                    if (string.IsNullOrWhiteSpace(ap) || string.IsNullOrWhiteSpace(numsc))
                        continue;

                    // попытка найти значение по ключу в словаре id_t101s
                    if (!id_t101s.TryGetValue((ap, numsc, pln), out int id_t101))
                        continue; // если шаблон не найден — пропускаем

                    // Парсим значения
                    decimal.TryParse(row["vitg"]?.ToString(), out var vint);
                    decimal.TryParse(row["iitg"]?.ToString(), out var iitg);

                    // список объектов типа Data101, которые хотим добавить в базу
                    // добавляем новый объект в список, чтобы потом все записи массово сохранить в базу.
                    data101Records.Add(new Data101
                    {
                        IdInfo = id_info,
                        IdT101 = id_t101,
                        Vint = vint,
                        Iitg = iitg
                    });
                }
            }

            db.Data101s.AddRange(data101Records);
            await db.SaveChangesAsync();
        }


		// получить id шаблона 101 формы по счету и его типу (А/П)
		// возвращает словарь соответсвий (ap, numsc, pln) - id_t101
		public async Task<Dictionary<(string ap, string numsc, string pln), int>> FindTemplateId101(DataSet dataSet)
		{
			// Сбор уникальных троек (ap, numsc, pln) из DataSet
			var keys = new HashSet<(string ap, string numsc, string pln)>();

			await using var db = dbFactory.CreateDbContext();

			foreach (DataTable table in dataSet.Tables)
			{
				foreach (DataRow row in table.Rows)
				{
					string? ap = row["ap"]?.ToString();
					string? numsc = row["numsc"]?.ToString();
					string? pln = row["pln"]?.ToString();

					if (!string.IsNullOrWhiteSpace(ap) &&
						!string.IsNullOrWhiteSpace(numsc) &&
						!string.IsNullOrWhiteSpace(pln))
					{
						keys.Add((ap, numsc, pln));
					}
				}
			}

			// Загружаем шаблоны из БД
			var allTemplates = await db.Templates101s.ToListAsync();

			// Фильтруем по тройке (ap, name, plan)
			var matched = allTemplates
				.Where(t => keys.Contains((t.AP, t.Name, t.Plan.ToString())))
				.ToDictionary(t => (t.AP, t.Name, t.Plan.ToString()), t => t.IdT101);

			return matched;
		}


		// создание загрузки данных форм, заполнение банка и даты
		public async Task<int> CreateLoadInfo(int regnum, DateTime dt)
		{
            await using var db = dbFactory.CreateDbContext();
            var dateOnly = DateOnly.FromDateTime(dt);
			int newInfo = await CheckInfo(regnum, dt);

			// Поиск существующей записи
			if (newInfo == -1)
			{
				// Создание новой записи
				var record = new FormInfo
				{
					Regnum = regnum,
					Dt = DateOnly.FromDateTime(dt)
				};

				db.FormInfos.Add(record);
				await db.SaveChangesAsync();

				// возврат id созданной записи
				return record.IdInfo;
			}
			// возврат существующей записи
			else return newInfo;
        }

		// проверка есть ли такое сочетание банк/дата
		public async Task<int> CheckInfo(int regnum, DateTime dt)
		{
            await using var db = dbFactory.CreateDbContext();
            var dateOnly = DateOnly.FromDateTime(dt);

            // Поиск существующей записи
            var existing = await db.FormInfos
                .FirstOrDefaultAsync(x => x.Regnum == regnum && x.Dt == dateOnly);

			if (existing != null)
			{
				return existing.IdInfo;
			}
			else return -1;
        }

      }
}


using BlazorApp1.Models;
using ClosedXML.Excel;
using DocumentFormat.OpenXml.InkML;
using Microsoft.EntityFrameworkCore;
using System.IO;
using System.Threading.Tasks;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace BlazorApp1
{
	public class ExcelService
	{
		private readonly IDbContextFactory<BanksContext> dbFactory;

		//конструктор с передачей фабрики контекста базы данных
		public ExcelService(IDbContextFactory<BanksContext> dbFactory)
		{
			this.dbFactory = dbFactory;
		}

		// возвращает массив байтов, содержащий Excel-фай
		public async Task<byte[]> GenerateExcelAsync(DateOnly dt, int regnum, int methodId)
		{
			//Создаётся новый экземпляр BanksContext
			//await using гарантирует, что context будет автоматически освобождён
			await using var db = await dbFactory.CreateDbContextAsync();

			// формирование SQL-подобный LINQ-запрос
			var query = from fi in db.FormInfos
						where fi.Dt == dt && fi.Regnum == regnum
						join bnk in db.Banks on fi.Regnum equals bnk.Regnum
						join mr in db.MethodsResults on fi.IdInfo equals mr.IdInfo
						join arg in db.Arguments on mr.IdArg equals arg.IdArg
						where arg.IdMethods == methodId
						join m in db.Methods on arg.IdMethods equals m.IdMethods
						select new
						{
							fi.Regnum,
							fi.Dt,
							bnk.Name,
							MethodName = m.Name,
							MethodDescr = m.Descr,
							ArgumentName = arg.Name,
							ArgumentShortName = arg.ShortName,
							mr.Val
						};

			// выполнение запроса и сохранение в список
			var data = await query.ToListAsync();

			// Используем первую строку для заголовков
			var first = data.First(); 

			// Создаётся Excel-файл с именем Results
			using var workbook = new XLWorkbook();
			var worksheet = workbook.Worksheets.Add("Results");

			// Заголовок — название метода
			worksheet.Cell(1, 1).Value = first.MethodName;
			worksheet.Range(1, 1, 1, 3).Merge().Style.Font.SetBold().Font.FontSize = 16;

			// Описание метода
			worksheet.Cell(2, 1).Value = first.MethodDescr;
			worksheet.Range(2, 1, 2, 7).Merge().Style.Font.FontSize = 12;

			// Информация: Имя (Name) и Дата (Dt)
			worksheet.Cell(3, 1).Value = first.Name;
			worksheet.Cell(3, 7).Value = first.Dt?.ToDateTime(TimeOnly.MinValue).ToString("dd.MM.yyyy");

			// Заголовки таблицы
			worksheet.Cell(5, 1).Value = "Показатель";
			worksheet.Cell(5, 2).Value = "Краткое имя";
			worksheet.Cell(5, 3).Value = "Значение";


			// запись данных
			for (int i = 0; i < data.Count; i++)
			{ 
					var row = data[i];
					worksheet.Cell(i + 6, 1).Value = row.ArgumentName;
					worksheet.Cell(i + 6, 2).Value = row.ArgumentShortName;
					worksheet.Cell(i + 6, 3).Value = row.Val;
			}

			// Автоширина
			worksheet.Columns().AdjustToContents();

			// Файл сохраняется в MemoryStream
			using var stream = new MemoryStream();
			workbook.SaveAs(stream);
			return stream.ToArray();
		}
	}
}
using BlazorApp1;
using BlazorApp1.Components;
using BlazorApp1.Models;
using CregitInfoWS;
using Microsoft.EntityFrameworkCore;
using Npgsql;
using System.ServiceModel;


var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddRazorComponents()
    .AddInteractiveServerComponents();
builder.Services.AddScoped<CreditOrgInfoClient>();

// получение строки подключения
var connectionString = builder.Configuration.GetConnectionString("PostgresConnection");

// Добавляем поддержку PostgreSQL через Entity Framework Core
builder.Services.AddDbContextFactory<BanksContext>(options =>
	options.UseNpgsql(connectionString));

builder.Services.AddBlazorBootstrap();


// Регистрируем CreditOrgInfoSoap вручную:
builder.Services.AddScoped<CreditOrgInfoSoap>(_ =>
{
	var binding = new BasicHttpBinding();
	var endpoint = new EndpointAddress("http://www.cbr.ru/CreditInfoWebServ/CreditOrgInfo.asmx");
	var factory = new ChannelFactory<CreditOrgInfoSoap>(binding, endpoint);
	return factory.CreateChannel();
});

// И регистрируем сам клиент
builder.Services.AddScoped<CreditOrgInfoClient>();
builder.Services.AddScoped<ExcelService>();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error", createScopeForErrors: true);
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();

app.UseStaticFiles();
app.UseAntiforgery();


app.MapRazorComponents<App>()
    .AddInteractiveServerRenderMode();

app.Run();
